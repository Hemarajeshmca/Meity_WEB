@{
    ViewBag.Form = "Masters Definition";
    ViewBag.helpName = "MastersDefinition.html";
    Layout = "~/Views/Shared/FormViewLayout1.cshtml";
}

<form id="masterscreen_form" class="form-horizontal" data-role="validator" novalidate="novalidate">
    <div class="panel panel-default">
        <div class="panel-body" style="padding-top:6px;padding-bottom:2px">
            <div class="row">
                <!-- Left col -->
                <div class="col-lg-3">
                    <!-- Custom tabs (Charts with tabs)-->
                    <div id="grid_master">
                    </div>
                </div>
                <div class="col-lg-9">
                    <div class=" row">
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label for="txtcode" class="col-sm-5 control-label required">Code:</label>
                                <div class="col-sm-7">
                                    <input type="text" id="txtcode" name="in_parent_code" class="form-control" readonly>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-4">
                            <div class="form-group">
                                <label for="txtderscription" class="col-sm-5 control-label required ">Description:</label>
                                <div class="col-sm-7">
                                    <input type="text" id="txtderscription" name="parent_descripton" class="form-control" maxlength="125" readonly>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-5" style="display:none">
                            <div class="form-group">
                                <label for="txt_timestamp" class="col-sm-5 control-label">Timestamp:</label>
                                <div class="col-sm-7">
                                    <input type="text" id="txt_timestamp" name="row_timestamp" class="form-control" maxlength="125">
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-5" style="display:none">
                            <div class="form-group">
                                <label for="txt_status_code" class="col-sm-5 control-label">Status Code:</label>
                                <div class="col-sm-7">
                                    <input type="text" id="txt_status_code" name="status_code" class="form-control" maxlength="125">
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-3" style=" display:none">
                            <div class="form-group" style=" display:none">
                                <label for="txtMode" class="col-sm-5 control-label">Mode Flag</label>
                                <div class="col-sm-7">
                                    <input type="text" id="txtMode" name="mode_flag" class="form-control">
                                    <input type="hidden"id="locallang">
                                </div>
                            </div>
                        </div>
                        <div class="col-xs-12">
                            <div id="grid_Drop_list">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>
<script src="~/API_Scripts/Master_retrievemastercode_APIClient.js"></script>
<script src="~/API_Scripts/Master_retrievemastercode_list_APIClient.js"></script>
<script src="~/API_Scripts/Master_savemaster_code_APIClient.js"></script>
<script src="~/API_Scripts/retrieveMasterDefinition_Model.js"></script>
<script src="~/API_Scripts/retrieveMasterDefinitionList_Model.js"></script>
<script src="~/API_Scripts/saveMasterDefinition_Model.js"></script>
<script src="~/API_Scripts/UmoldITWebAPIProxy.js"></script>
<script src="~/API_Scripts/MasterDefinition.js"></script>
<script src="~/CommonScripts/common.js"></script>
<script src="~/CommonScripts/tamil.js"></script>
<script src="~/CommonScripts/Hindi.js"></script>
<script>
    var role_chargeto = "";
    $(document).ready(function () {
        master_userRoleNew();
        Form_validate_Name = $('form.form-horizontal').attr('id');
        var container = $("#masterscreen_form");
        kendo.init(container);
        container.kendoValidator({
        });
        setlocalStorage("status", "Active");
        var data = [];
        grid_master(data);
        gridFilter(data);
        $("#hide_div").hide();
        $("#DocStat").hide();
        $("#ststus").hide();
        $("#btnRnew").hide();
        $("#inactivate").hide();
        $("#modevalue").hide();
        //  retrieve_masteractivity_list();
        load();
        $("#grid_Drop_list .k-grid-toolbar").hide();
        setlocalStorage('role_chargeto', "Active");
        Screen_Id = "QUICKCODE";
        permission = sec_Master_Permission(Screen_Id);
    });
</script>
<script>
    function load() {
        try {
            var formval = form_Serialize("masterscreen_form");
            var obj_val = JSON.parse(formval);
            obj_val.parent_code = "SYS";

            var data = {};
            data.context = WebAPIProxy.getContext();
            data.context.Header = obj_val;
            //retrieve_masteractivity_list(data);
            var Context = data.context;
            $.ajax({
                type: "POST",
                data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, parent_code: Context.Header.parent_code }),
                url: "/MastersDefinition/MasterDefinitionList",
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    debugger;
                    if (response.context != null) {
                        generate_masteractivity_list(response.context.detail);
                        //SetPager(response.context.Filter.out_record_count)
                    }
                    else {
                        grid_role([]);
                    }
                },
                error: function (er) {
                    alert(er)
                    console.log(er)
                }

            });
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function generate_masteractivity_list(res) {
        try {
            if (res == null) {
                grid_master([]);
            }
            else {
                var data = changedataType(res);
                grid_master(data);
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function generate_masteractivity_header(res) {
        debugger;
        try {
            $("#txtcode").attr("readonly", "");
            $("#txt_status_code").val(res.out_status_code);
            //$("#DocStat").val(res.status_desc);
            $("#txtMode").val(res.out_mode_flag);
            $("#txt_Role_rowid").val(res.out_role_rowid);
            $("#txt_timestamp").val(res.out_row_timestamp);
            $("#txtderscription").val(res.out_parent_description);
            $("#modevalue").text("Edit Mode");
            $('.k-widget.k-tooltip.k-tooltip-validation.k-invalid-msg').css('display', 'none');
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function generate_masteractivity_detail(res) {
        try {
            if (res == null) {
                gridFilter([]);
            }
            else {
                var data = changedataType(res);
                gridFilter(data);
            }

        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function create_new() {
        try {
            clear_val();
            load();
            //var formval = form_Serialize("masterscreen_form");
            //var obj_val = JSON.parse(formval);
            //obj_val.parent_code = "SYS";
            ////obj_val.orgn_level = ".";
            //retrieve_masteractivity_details(obj_val);
            //retrieve_masteractivity_list();


            $("#txtcode").removeAttr("readonly");
            $("#txtMode").val("I");
            $("#txt_status_code").val("N");
            $("#modevalue").text("New Mode");
            $('.k-widget.k-tooltip.k-tooltip-validation.k-invalid-msg').css('display', 'none');

        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function clear_val() {
        try {
            $("#txtcode").val('');
            $("#txtderscription").val('');
            gridFilter([]);
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function save() {
        debugger;
        try {
           var mandatory_check = true;
            var grid_validate_msg = "";
            // var validate_msg = "";
            var grid_val = JSON.stringify($("#grid_Drop_list").data().kendoGrid._data);
            var Bind = {};
            Bind = grid_val;
            var result = JSON.parse(Bind);
            if (result.length == 0) {
                kendoAlert("Please give the data before save!!!");
                return false;
            }

            var formval = form_Serialize("masterscreen_form");
            var obj_val = JSON.parse(formval);
            var grid_val = JSON.stringify($("#grid_Drop_list").data().kendoGrid._data);
            var Bind = {};
            Bind = grid_val;
            var result = JSON.parse(Bind);
            result.out_master_rowid = "0";
            result.out_row_slno = "0";
            
           /* var test = 'Arul jothi'
            var hasSpace = test.trim().indexOf(' ') >= 0; */

            $.each(result, function (index, value) {
                debugger;
                var row_id = value.out_master_rowid;
                if (row_id == undefined || row_id == "") {
                    result[index].out_master_rowid = "0";
                }
                var row_slno = value.out_row_slno;
                if (row_slno == undefined || row_slno == "") {
                    result[index].out_row_slno = "0";
                }

                //Introduced By Venkat MasterCode Cannot be Space 11-11-2020 start 
                var Master_code = value.out_master_code;
                if (Master_code.trim().indexOf(' ') >= 0) {
                    grid_validate_msg += "Master Code Cannot be Space !!! <br>";
                    mandatory_check = false;
                    //kendoAlert("Master Code Cannot be Space !!!");
                   // break;
                   // return false;
                   // return;
                }
                //End

                var locallang_flag = value.out_locallang_flag;
                if (locallang_flag == undefined || locallang_flag == "") {
                    result[index].out_locallang_flag = "Y";
                }
                var depend_code = value.out_depend_code;
                if (depend_code == undefined || depend_code == "") {
                    result[index].out_depend_code = "";
                }
                var status_code = value.out_status_code;
                if (status_code == undefined || status_code == "") {
                    result[index].out_status_code = "A";
                }

                if (status_code == "I") {
                    result[index].out_status_code = "A";
                    result[index].out_status_desc = "Active";

                }
                var mode = value.out_mode_flag;
                if (mode == "S") {
                    result[index].out_mode_flag = "U";
                }
                if (mode == "U") {
                    result[index].out_status_code = "A";
                    result[index].out_status_desc = "Active";
                }
            });

            if (mandatory_check == false) {
                kendoAlert(grid_validate_msg);
                return false;
            }
            var obj_grid_val = result;
            var data = {};
            data.context = WebAPIProxy.getContext();
            data.context.Header = obj_val;
            data.context.Detail = obj_grid_val;
            var Header = data.context.Header;
            var Detail = data.context.Detail;
            var Context = data.context;
            $.ajax({
                type: "POST",
                data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, header: Context.Header, detail: Context.Detail }),
                url: "/MastersDefinition/MasterDefinitionSave",
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    var Res = JSON.parse(response);
                    if (Res.context != null) {
                        var mode = $("#txtMode").val();
                        if (mode == "I") {
                            kendoAlert("Master Definition  Details saved successfully");
                            load();
                            clear_val();
                        }
                        else if (mode == "D") {
                            kendoAlert("Master Definition  Details inactivated successfully");
                            get_master_details($("#txtcode").val());
                        }
                        else if (Res.applicationException != null) {
                            kendoAlert(Res.applicationException.errorDescription);
                        }
                        else {
                            kendoAlert("Master Definition  Details saved successfully");
                            get_master_details($("#txtcode").val());
                        }
                    }
                    //else {
                    //    kendoAlert(Res.ApplicationException.errorDescription);
                    //}
                },
                error: function (er) {
                    alert(er)
                    console.log(er)
                }

            });
            //  save_masteractivity_details(data);
            //load();
            $('.k-widget.k-tooltip.k-tooltip-validation.k-invalid-msg').css('display', 'none');
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function DeleteDetails() {
        try {
            $("#txtMode").val('D');
            save();
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
</script>
<script>
    function grid_master(data) {
        try {
            $("#grid_master").kendoGrid({
                dataSource: {
                    data: data, //  pageSize: 20
                },
                height: 470,
                sortable: true,
                selectable: true,
                change: onChangeSelection,
                selectable: "singl",   //  Grid Row Selection
                navigatable: true,
                columns: [
                    {
                        field: "out_master_rowid",
                        title: "Master Row Id",
                        hidden: true,
                        width: 30
                    },
                    {
                        field: "out_parent_code",
                        title: "Parent Code",
                        hidden: true,
                        width: 30
                    },
                    {
                        field: "out_parent_descripton",
                        title: "Parent Descripton",
                        hidden: true,
                        width: 30
                    },
                    {
                        field: "out_master_code",
                        title: "Master Code",
                        width: 30
                    },
                    {
                        field: "out_master_description",
                        title: "Master Descripton",
                        width: 30
                    },
                    {
                        field: "out_master_ll_description",
                        title: "Master LL Descripton",
                        hidden: true,
                        width: 30
                    },
                    {
                        field: "out_depend_desc",
                        title: "Depend Desc",
                        hidden: true,
                        width: 30
                    },
                    {
                        field: "out_status_desc",
                        title: "Status Desc",
                        hidden: true,
                        width: 30
                    }],
                dataBound: function () {
                    var rows = this.items();
                    $(rows).each(function () {
                        var index = $(this).index() + 1;
                        var rowLabel = $(this).find(".row-number");
                        $(rowLabel).html(index);
                    });
                }
            });
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function onChangeSelection() {
        try {
            var grid = $("#grid_master").data("kendoGrid");
            var selectedItem = grid.dataItem(grid.select());

            var formval = form_Serialize("masterscreen_form");
            var obj_val = JSON.parse(formval);
            obj_val.parent_code = selectedItem.out_master_code;
            //obj_val.parent_code=parent_code;


            var data = {};
            data.context = WebAPIProxy.getContext();;
            data.context.Header = obj_val;
            var Context = data.context;
            $.ajax({
                type: "POST",
                data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, parent_code: Context.Header.parent_code }),
                url: "/MastersDefinition/MasterDefinitionsingle",
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    debugger;
                    if (response.context != null) {
                        debugger;
                        // generate_masteractivity_header(response.context.Header);
                        generate_masteractivity_detail(response.context.detail);
                        $("#grid_Drop_list .k-grid-toolbar").show();
                    }
                    else {
                        gridFilter([]);
                    }
                },
                error: function (er) {
                    alert(er)
                    console.log(er)
                }

            });
            $("#txtcode").val(selectedItem.out_master_code);
            $("#txtderscription").val(selectedItem.out_master_description);
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function get_master_details(id) {
        try {
            var formval = form_Serialize("masterscreen_form");
            var obj_val = JSON.parse(formval);
            obj_val.parent_code = id;



            var data = {};
            data.context = WebAPIProxy.getContext();;
            data.context.Header = obj_val;
            var data = {};
            data.context = WebAPIProxy.getContext();;
            data.context.Header = obj_val;
            var Context = data.context;
            $.ajax({
                type: "POST",
                data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, parent_code: Context.Header.parent_code }),
                url: "/MastersDefinition/MasterDefinitionsingle",
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    debugger;
                    if (response.context != null) {
                        debugger;
                        // generate_masteractivity_header(response.context.Header);
                        generate_masteractivity_detail(response.context.detail);
                        $("#grid_Drop_list .k-grid-toolbar").show();
                    }
                    else {
                        gridFilter([]);
                    }
                },
                error: function (er) {
                    alert(er)
                    console.log(er)
                }

            });
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
</script>
<script>
    //var data = [];
    var status_desc_list = "";
    function gridFilter(data) {
        try {
            $("#grid_Drop_list").kendoGrid({
                dataSource: {
                    data: data,
                    schema: {
                        model: {
                            fields: {

                                out_master_rowid: { type: "string" },
                                out_row_slno: { type: "string" },
                                out_master_code: { type: "string", editable: true, validation: { required: { message: "Code cannot be blank" } } },
                                out_master_description: { type: "string", editable: true, validation: { required: { message: "Description cannot be blank" } } },
                                out_master_ll_description: { type: "string" },
                                out_depend_code: { type: "string" },
                                out_status_code: { type: "string", defaultValue: "A" },
                                out_status_desc: { type: "string", defaultValue: getlocalStorage('status'), editable: false },
                                out_row_timestamp: { type: "string" },
                                out_locallang_flag: { type: "string" },
                                out_mode_flag: { type: "string", defaultValue: "I" }
                            }
                        }
                    }
                },
                height: 400,
                groupable: false,
                dataBinding: setDefaultValues,

                dataBound: function (e) {
                    resultData = e.sender._data;
                    var rows = $('#grid_Drop_list').data('kendoGrid').tbody.children();
                    setColor(rows, resultData);
                },
                edit: OnEdit,
                toolbar: "<a class='k-grid-add' id='btnSave' href=''><span class='fa fa-plus' style='color:Black'></span></a>",
                sortable: true,
                selectable: true,
                navigatable: true,

                columns: [{
                    command: [
                        {
                            name: "Delete",
                            id: "Delete",
                            imageClass: "fa fa-close",
                            click: function (e) {
                                // e.preventDefault();
                                var grid = $("#grid_Drop_list").data("kendoGrid");
                                var dataItem = $("#grid_Drop_list").data("kendoGrid").dataItem($(e.target).closest("tr"));
                                DeleteWindowEvent(e, dataItem, grid);
                                e.stopImmediatePropagation()
                            }
                        },
                    ], title: "&nbsp;", width: "25px",
                },
                {
                    field: "out_master_rowid",
                    title: "Depend code",
                    width: 100,
                    hidden: true,

                }, {
                    field: "out_row_slno",
                    title: "Depend code",
                    width: 100,
                    hidden: true,

                },
                {
                    field: "out_master_code",
                    title: "Value Code",
                    width: 100,

                },
                {
                    field: "out_master_description",
                    title: "Value in English",
                    width: 100,

                },
                {
                    field: "out_master_ll_description",
                    title: "Value in local Lang",
                    width: 100,

                },
               
                    {           //ADDED BY VINOTH - ISSUE- DEPEND CODE EMPTY WHILE SAVING
                        field: "out_depend_code",
                        title: "Depend code",
                        width: 100,
                    },
                {
                    field: "out_depend_desc",
                    title: "Dependent On",
                    hidden: true,
                    width: 100
                }, {
                    field: "out_status_code",
                    title: "Status",
                    hidden: true,
                    width: 300,
                },
                {
                    field: "out_status_desc",
                    title: "Status",
                    editor: function (container, options) {
                        combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "status_code", "grid_Drop_list")
                    },
                    width: 100,
                    // editor: nonEditor
                },
                {
                    field: "out_locallang_flag",
                    title: "Mode",
                    hidden: true
                },
                {
                    field: "out_row_timestamp",
                    title: "Mode",
                    hidden: true
                },
                {
                    field: "out_mode_flag",
                    title: "Mode",
                    hidden: true
                }],
                editable: true

            });

        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    out_status_desc_list = grid_combo_mastercodes("STATUS");

    function OnEdit(e) {
        setDefaultValues(e);
        e.container.find("input[name='out_master_code']").attr('maxlength', '25');
        e.container.find("input[name='out_master_description']").attr('maxlength', '125');
        //e.container.find("input[name='dependent_code']").attr('maxlength', '10');
        var columnIndex = this.cellIndex(e.container);
        var fieldName = this.thead.find("th").eq(columnIndex).data("field");
        if (!isEditable(fieldName, e.model)) {
            this.closeCell(); // prevent editing
        }
        e.container.find("input[name='out_master_ll_description']").on("keypress", function (e) {
            var valueprd = $(this).val();
            var tesxffe = convertThis(e);
            $("#locallang").val(valueprd);
        });
        e.container.find("input[name='out_master_ll_description']").change(function () {
            $("#locallang").val("");
            var valueprd = $(this).val();
            e.model.out_master_ll_description = $("#locallang").val();
        });
        e.container.find("input[name='out_master_ll_description']").focusout(function () {
            e.model.out_master_ll_description = $("#locallang").val();
        });
    }
    function isEditable(fieldName, model) {
        try {
            if (fieldName === "out_master_code") {
                // condition for the field "ProductName"
                return ((model.hasOwnProperty("out_master_code") && model.mode_flag !== "U"));
            }
            else if (fieldName === "out_master_description") {
                // condition for the field "ProductName"
                return ((model.status_desc !== "Inactive"));
            }
            return true; // default to editable
        }

        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
</script>
<style>
    .k-widget.k-tooltip {
        background-color: #ffe79e;
        color: #6b5100;
    }

    span.k-tooltip {
        white-space: pre-line;
    }
</style>

