@{
    ViewBag.Form = "Checklist Definition";
    Layout = "~/Views/Shared/FormViewLayout1.cshtml";
}
<form id="Checklist_DNew" class="form-horizontal" data-role="validator" novalidate="novalidate">
    <div class="panel panel-default">
        <div class="panel-body" style="padding-top:6px;padding-bottom:2px">
            <div class="row" style="padding-bottom:15px">
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="cmb_menu" class="col-sm-4 control-label required">Activity/Screen Name:</label>
                        <div class="col-sm-7">
                            <input id="cmb_menu" name="IOU_activity_code" style="width: 100%" data-role="filtercombo" onchange="fetch()">
                        </div>
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="txtVersion" class="col-sm-4 control-label required">Version:</label>
                        <div class="col-sm-7">
                            <input type="text" id="txtVersion" name="In_txtVersion" class="form-control" maxlength="125" disabled>

                        </div>
                    </div>

                </div>
                <div class="row">
                    <div class="col-sm-5" style="display:none">
                        <div class="form-group">
                            <label for="chklst_rowid" class="col-sm-5 control-label">chklst_rowid:</label>
                            <div class="col-sm-7">
                                <input type="text" id="chklst_rowid" name="IOU_chklst_rowid" class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-5" style="display:none">
                        <div class="form-group">
                            <label for="txt_row_timestamp" class="col-sm-5 control-label">Timestamp:</label>
                            <div class="col-sm-7">
                                <input type="text" id="txt_row_timestamp" name="In_row_timestamp" class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-5" style="display:none">
                        <div class="form-group">
                            <label for="txt_status_code" class="col-sm-5 control-label">Status Code:</label>
                            <div class="col-sm-7">
                                <input type="text" id="txt_status_code" name="In_status_code" class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-3" style=" display:none">
                        <div class="form-group" style=" display:none">
                            <label for="txtMode" class="col-sm-5 control-label">Mode Flag</label>
                            <div class="col-sm-7">
                                <input type="text" id="txtMode" name="In_mode_flag" class="form-control">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12">
                <div id="grid_Check_List">
                </div>
            </div>
        </div>
    </div>
</form>

<script src="~/API_Scripts/UmoldITWebAPIProxy.js"></script>

<script>
    click_act_name = "Checklist_DefinitionNew_List";
    click_ctrl_name = "Checklist_DefinitionNew";
    form_list_url = '../' + click_ctrl_name + '/' + click_act_name;
</script>
<script>
    $(document).ready(function () {
        Form_validate_Name = $('form.form-horizontal').attr('id');
        var container = $("#Checklist_DNew");
        kendo.init(container);
        container.kendoValidator({
        });

        master_milkmap();
        $(".file_attach").attr("hdrtitle", "Checklist Definition");
        $(".notes").attr("hdrtitle", "Checklist Definition");
        $("#lblForm_menuid").text("CHKLIST");
        
        var map_in = "";
        $("#cmb_menu").empty();
        map_in = grid_comboScreen_mastercodes("ACTIVITY");
        filter_combobox("cmb_menu", map_in);
        $('#divCreate #review').hide();
        $("#txtcommon_id").hide();
        $("#common_id").hide();

        gridCheckList([]);
             
    });
</script>
<script>
    function load_master_code() {
        try {
            debugger;
            var data = {};
            var context = WebAPIProxy.getContext();
            data.userId = context.userId
            data.orgnId = context.orgnId
            data.locnId = context.locnId
            data.localeId = context.localeId
            data.screen_Id = "CHKLIST";
            var tab_values = ajaxcall_param("/Home/screenId_mastercodelist", JSON.stringify(data));
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
</script>
<script>
    function gridCheckList(data) {
        try {
            $("#grid_Check_List").kendoGrid({
                dataSource: {
                    data: data,
                    schema: {
                        model: {
                            fields: {
                                In_element_code: { type: "string", required: true },
                                In_element_desc: {
                                    validation: {
                                        dropdownlistValidation: function (input) {
                                            if (input.is("[name='In_element_desc']")) {
                                                var isValid = true;
                                                input.attr("data-dropdownlistValidation-msg", "Check List Element cannot be blank"); if (input.val().length <= 0) {
                                                    isValid = false;
                                                }
                                                return isValid;
                                            }
                                            return true;
                                        }
                                    }
                                },
                                In_subelement_code: { type: "string", required: true },
                                In_subelement_desc: {
                                    validation: {
                                        dropdownlistValidation: function (input) {
                                            if (input.is("[name='In_subelement_desc']")) {
                                                var isValid = true;
                                                input.attr("data-dropdownlistValidation-msg", "Check List Sub Element cannot be blank"); if (input.val().length <= 0) {
                                                    isValid = false;
                                                }
                                                return isValid;
                                            }
                                            return true;
                                        }
                                    }
                                },
                                In_any_all_flag: { type: "string" },
                                In_any_all_flag_desc: { type: "string" },
                                In_allowed_option: { type: "string", validation: { required: { message: "Allowed Option cannot be blank" } } },
                                In_chklstelement_rowid: { type: "string" },
                                In_mandatory_flag: { editable: false },
                                In_mode_flag: { type: "string"},
                                In_status_code: { type: "string", defaultValue: "A" },
                                In_status_desc: { type: "string",  }
                            }
                        }
                    }
                },
                toolbar: "<a class='k-grid-add' id='btnSave' href=''><span class='fa fa-plus' style='color:Black'></span></a>",
                height: 400,
                groupable: false,
                dataBinding: setDefaultValues,

                dataBound: function (e) {
                    resultData = e.sender._data;
                    var rows = $('#grid_Check_List').data('kendoGrid').tbody.children();
                    setColor(rows, resultData);
                },
                   
                edit: OnEdit,
                sortable: true,
                selectable: true,
                navigatable: true,
                columns: [{
                    command: [
            {
                name: "Delete",
                id: "Delete",
                imageClass: "fa fa-close",
                click: function (e) {
                    // e.preventDefault();
                    var grid = $("#grid_Check_List").data("kendoGrid");
                    var dataItem = $("#grid_Check_List").data("kendoGrid").dataItem($(e.target).closest("tr"));
                    DeleteWindowEvent(e, dataItem, grid);
                    e.stopImmediatePropagation()
                }
            },
                    ], title: "&nbsp;", width: "25px",
                },
                 {
                     field: "In_chklstelement_rowid",
                     title: "chklstelement_rowid",
                     width: 100,
                     hidden: true
                 },
                 {
                     field: "In_element_code",
                     title: "checklist element code",
                     width: 100,
                     hidden: true
                 },
                {
                    field: "In_element_desc",
                    title: "Checklist Element",                  
                    editor: function (container, options) {
                        combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "In_element_code", "grid_Check_List")
                    },
                    width: 150
                },
                {
                    field: "In_subelement_code",
                    title: "checklistsub element code",
                    width: 100,
                    hidden: true
                },
                {
                    field: "In_subelement_desc",
                    title: "Checklist SubElement",                  
                    editor: '<div class="input-group input-group-sm"><input type="text" readonly name="In_subelement_desc" maxlength="50" style="width:190px;color:black"  onkeypress="return speical_char(event)" data-bind="value:subelement_desc"/><span class="input-group-btn" style="padding-right: 150px;"><a class="HelpWindow fa fa-search fa-lg" data-toggle="modal" href="/HelpFilter/HelpFilter" hdrtitle="Subelement Details" searchid="S11" data-target="#HelpModal" onclick=transfer(this,"grid","grid_Check_List","gridCheckList") title="Search" style="font-size: 15px; padding-left: 10px;"></a> </span> </div>',
                    width: 150
                },
                   {
                       field: "In_mandatory_flag",
                       title: "Mandatory",
                       template: '<input type="checkbox" #= In_mandatory_flag == "Y" ? "checked=checked" : "" # class="chkbx1"></input>',
                       update: true,
                       width: 50
                   },
                {
                    field: "In_allowed_option",
                    title: "Allowed Options",
                    width: 150
                },
                {
                    field: "In_any_all_flag",
                    title: "any_all_flag",
                    hidden: true,
                    width: 300,
                },
                {
                    field: "In_any_all_flag_desc",
                    title: "Count",
                    width: 150,
                    editor: function (container, options) {
                        combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "In_any_all_flag", "grid_Check_List")
                    },
                },
               {
                   field: "In_status_code",
                   title: "Status",
                   hidden: true,
                   width: 300,
               },
                {
                    field: "In_status_desc",
                    title: "Status",
                    editor: function (container, options) {
                        combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "In_status_code", "grid_Check_List")
                    },
                    width: 300,
                    hidden: true,
                    // editor: nonEditor
                },
                {
                    field: "In_mode_flag",
                    title: "Mode",
                    hidden: true
                }],
                editable: true
            });
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    load_master_code();
    In_element_desc_list = grid_comboScreen_mastercodes("QCD_CHKLSTELE");
    In_subelement_desc_list = grid_comboScreen_mastercodes("CHEKLIST");
    In_any_all_flag_desc_list = grid_comboScreen_mastercodes("QCD_COUNT");
    In_status_desc_list = grid_comboScreen_mastercodes("STATUS");
    function OnEdit(e) {
        debugger;
        setDefaultValues(e);
        e.container.find("input[name='In_element_desc']").focusout(function () {
            debugger;
            e.model.In_subelement_desc = " ";           
            var kycgrid = $("#grid_Check_List").data("kendoGrid");
            kycgrid.dataSource.sync();
            return false;
        });
    }
</script>

<script>
    function fetch() {
        load_master_code();
        In_subelement_desc_list = grid_comboScreen_mastercodes("QCD_CLE_KYC");
        var c = $('#cmb_menu');
        ddl = c.data('kendoComboBox').value();
        if (ddl != "" && ddl != undefined) {
            var formval = form_Serialize("Checklist_DNew");
            var obj_val = JSON.parse(formval);
            if (obj_val != undefined) {
                if (obj_val.IOU_chklst_rowid == "" || obj_val.IOU_chklst_rowid == undefined) {
                    obj_val.IOU_chklst_rowid = 0;
                }
                obj_val.IOU_activity_code = $('#cmb_menu').val();
                var data_fetch = {};
                data_fetch.context = WebAPIProxy.getContext();
                data_fetch.context.Header = obj_val;
                var Context = data_fetch.context;
                $.ajax({
                    type: "POST",
                    data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, chklst_rowid : Context.Header.IOU_chklst_rowid,activity_code: Context.Header.IOU_activity_code }),
                    url: "/Checklist_DefinitionNew/Checklist_Definitionfetch",
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        debugger;
                        if (response.context != null) {
                            generate_Chek_List_header(response.context.Header)
                            generate_Chek_List_element(response.context.Element);
                        }
                        else {
                            gridCheckList([]);
                        }
                    },
                    error: function (er) {
                        alert(er)
                        console.log(er)
                    }

                });
            }
        }
        else {
            gridCheckList([]);
            $("#txtVersion").val('');
        }
    }

    function generate_Chek_List_header(res) {
        if (res != null) {
            $("#chklst_rowid").val(res.IOU_chklst_rowid);
            $("#txt_row_timestamp").val(res.In_row_timestamp);
            $("#txt_status_code").val(res.In_status_code);
            $("#txtMode").val(res.In_mode_flag);
            //$('#cmb_menu').data("kendoComboBox").value(res.activity_code);
        }
    }
    function generate_Chek_List_element(res) {
        if (res != null) {
            load_master_code();
            In_subelement_desc_list = grid_comboScreen_mastercodes("CHEKLIST");
            var data = changedataType(res);
            gridCheckList(data);
        }
        else {
            gridCheckList([]);
        }
    }
    function get_CheckList_details(res) {
        fetch();
    }
</script>

<script>
    function save() {
        try {
            var mandatory_check = true;
            if ($("#txtMode").val() == "S") {
                $("#txtMode").val('U');
            }

            if ($("#txtMode").val() == "") {
                $("#txtMode").val('I');
            }

            var formval = form_Serialize("Checklist_DNew");
            var obj_val = JSON.parse(formval);
            if (obj_val.IOU_chklst_rowid == undefined || obj_val.IOU_chklst_rowid == '') {
                obj_val.IOU_chklst_rowid = 0;
            }
            if (obj_val.In_status_code == undefined || obj_val.In_status_code == '') {
                obj_val.In_status_code = "A";
            }
            obj_val.In_activity_code = obj_val.IOU_activity_code;
            var grid_val = JSON.stringify($("#grid_Check_List").data().kendoGrid._data);
            var Bind = {};
            Bind = grid_val;
            var result = JSON.parse(Bind);
            var grid_validate_msg = "";

            if (result.length == 0) {
                kendoAlert("Atleast one record needs to be entered");
                mandatory_check = false;
                return false;
            }
            $.each(result, function (key, value) {
                if (value.In_element_desc == "" || value.In_element_desc == undefined) {
                    grid_validate_msg += "checklist element cannot be blank <br>";
                    mandatory_check = false;
                }
                if (value.In_subelement_desc == "") {
                    grid_validate_msg += "checklist subelement cannot be blank <br>";
                    mandatory_check = false;
                }
                if (value.In_allowed_option == "") {
                    grid_validate_msg += "allowed option cannot be blank <br>";
                    mandatory_check = false;
                }
                if (mandatory_check == false) {
                    kendoAlert(grid_validate_msg);
                    return false;
                }
            });

            if (mandatory_check == true) {
                $.each(result, function (index, value) {
                    var chklstelement_rowid = value.In_chklstelement_rowid;
                    if (chklstelement_rowid == undefined || chklstelement_rowid == '') {
                        result[index].In_chklstelement_rowid = "0";
                    }
                    var mmode = result[index].In_mode_flag;
                    if (mmode == "S") {
                        result[index].In_mode_flag = "U";
                    }
                    //if (mmode == "" || mmode == undefined) {
                       
                    //}
                    if (result[index].In_chklstelement_rowid == "0") {
                        result[index].In_mode_flag = "I";
                    }
                    else {
                        result[index].In_mode_flag = "U";
                    }
                    var any_all_flag = result[index].In_any_all_flag;
                    if (any_all_flag == "" || any_all_flag == undefined) {
                        result[index].In_any_all_flag = "N";
                    }                   
                });
                var obj_grid_val = result;
                var data = {};
                data.context = WebAPIProxy.getContext();
                data.context.Header = obj_val;
                data.context.Element = obj_grid_val;
                var Context = data.context;
                $.ajax({
                    type: "POST",
                    data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, Header: Context.Header, Element: Context.Element }),
                    url: "/Checklist_DefinitionNew/Checklist_DefinitionSave",
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        console.log(response)
                        var Res = JSON.parse(response);
                        if (Res.context != null) {
                            var mode = $("#txtMode").val();
                            if (mode == "I") {
                                setlocalStorage('chklst', 'save');
                                kendoAlert("CheckList saved successfully");
                                get_CheckList_details(Res.context.Header);
                            }
                            else if (mode == "D") {
                                kendoAlert("CheckList inactivate successfully");
                                setlocalStorage('chklst', 'ignore');
                                get_CheckList_details(Res.context.Header);
                            }
                            else {
                                kendoAlert("CheckList Update successfully");
                                setlocalStorage('chklst', 'save');
                                get_CheckList_details(Res.context.Header);
                            }
                        }
                        else {
                            kendoAlert(Res.ApplicationException.errorDescription);
                        }
                    },
                    error: function (er) {
                        alert(er)
                        console.log(er)
                    }

                });
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    function DeleteDetails() {
        try {
            $("#txtMode").val('D');
            save();
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
</script>
<script>
    $(function () {
        $('#grid_Check_List').on('click', '.chkbx1', function () {
            var checked = $(this).is(':checked');
            var grid = $('#grid_Check_List').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            var row = $(this).closest('tr');
            if (checked == true) {
                dataItem._set('In_mandatory_flag', 'Y');
            }
            else {
                dataItem._set('In_mandatory_flag', 'N');
            }
        })
    })
</script>


<script>
    function grid_control() {
        try {
            var control_Name = [
                { "dataCol": "element_code", "grid_row_col": "In_element_code" },
                { "dataCol": "In_element_desc", "grid_row_col": "In_element_desc" },
                { "dataCol": "subelement_desc", "grid_row_col": "In_subelement_desc" },
                { "dataCol": "subelement_code", "grid_row_col": "In_subelement_code" },
                { "dataCol": "", "grid_row_col": "In_chklstelement_rowid" },
                { "dataCol": "", "grid_row_col": "In_any_all_flag" },
              
                { "dataCol": "", "grid_row_col": "In_any_all_flag_desc" },
                { "dataCol": "", "grid_row_col": "In_allowed_option" },
                { "dataCol": "", "grid_row_col": "In_mandatory_flag" },
                { "dataCol": "", "grid_row_col": "In_status_code" },
                { "dataCol": "", "grid_row_col": "In_status_desc" },             
              { "dataCol": "", "grid_row_col": "uid" }
            
            ];
            return control_Name
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    function controlName() {
        var control_Name = [
        ];
        return control_Name
    }

    function trans_input_data() {
        var trans_coll = [
            { "trasfer": "NO", "dataCol": "", "controlId": "", "grid_id": "", "grid_row_col": "" },
            { "trasfer": "Yes", "dataCol": "In_element_desc", "controlId": "", "grid_id": "grid_Check_List", "grid_row_col": "" },

        ];
        return trans_coll;
    }
</script>
<style>
    .k-widget.k-tooltip {
        background-color: #ffe79e;
        color: #6b5100;
    }

    span.k-tooltip {
        white-space: pre-line;
    }
</style>
<script src="~/CommonScripts/HelpFile.js"></script>