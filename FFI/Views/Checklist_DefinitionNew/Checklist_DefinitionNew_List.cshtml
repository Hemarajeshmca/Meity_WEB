
@{
    ViewBag.List = "Checklist Definition";
    Layout = "~/Views/Shared/ListViewLayout.cshtml";
}
<form id="frm_chklist_form" class="form-horizontal" data-role="validator" novalidate="novalidate">
    <div class="row">
        <div class="col-xs-12">
            <div id="gd_chklist">
                <div id="chklist_Grid"></div>
            </div>
        </div>
    </div>
</form>

    <script>
        click_act_name = "Checklist_DefinitionNew";
        click_ctrl_name = "Checklist_DefinitionNew";
        form_list_url = '../' + click_ctrl_name + '/' + click_act_name;
    </script>

<script>
    var menuId = "";
    var permission = "";
    $(document).ready(function () {

        $(".adv_filter").attr("hdrtitle", "Checklist Definition List Record");
        $(".adv_filter").attr("fltid", "");
        $(".Export").attr("hdrtitle", "Checklist Definition List");
        $(".Export").attr("SubTreeId", "CHKLIST");

        Screen_Id = "CHKLIST";
        permission = sec_Permission(Screen_Id);
        page_load_list_permission(permission);
        setlocalStorage("ls_pageList", "");
    });
</script>

    <script>
        function listpageloadfetch() {
            try {
                var formval = form_Serialize("frm_chklist_form");
                var obj_val = JSON.parse(formval);
                obj_val.FilterBy_Option = "ALL";
                obj_val.FilterBy_Code = ".";
                if (getlocalStorage('flt_condition') != undefined && getlocalStorage('flt_condition') != "") {
                    obj_val.FilterBy_Fromvalue = getlocalStorage('flt_condition');
                }
                else {
                    obj_val.FilterBy_Fromvalue = ".";
                }
                obj_val.FilterBy_Tovalue = ".";


                var data = {};
                data.context = WebAPIProxy.getContext();;
                data.context.Filter = obj_val;
                retrieve_bank_list(data);               
            }
            catch (err) {
                javascript_log4j_root(arguments.callee.name, err);
            }
        }


        var status_Priority = [];
        function chklistgrid(data) {
            try {
                $.each(data, function (index, value) {
                    var flag = false;
                    $.each(status_Priority, function (sindex, svalue) {
                        if (svalue == value.status_desc) {
                            flag = true;
                        }
                    });
                    if (flag == false) {
                        status_Priority.push(value.status_desc);
                    }
                });
        $("#chklist_Grid").kendoGrid(
            {
                dataSource: {
                    data: data,
                    pageSize: 20,
                    change: function (e) {
                        setTimeout(function () {
                            var gd = $("#chklist_Grid").data("kendoGrid");
                            filter_row(gd);
                            $('.k-i-close').css('display', 'none');
                            $('button.k-button-icon').css('display', 'none');
                            $('#chklist_Grid .k-input').prop('disabled', false);
                            $('#chklist_Grid .k-input').prop('readonly', true);
                        }, 1);
                    },
                },
                toolbar: "<button type='button' id='Exportclick' class='k-grid-excel' style='display:none' href=''><span class='fa fa-file-excel-o' style='color: Black;'> &nbsp Export To Excel</span></button>",
                excelExport: function (e) {
                    var gd = $("#chklist_Grid").data("kendoGrid");
                    var len = gd.dataSource._data.length;
                    var chkall = $('#chkall').is(':checked');
                    var chkfilter = $('#chkfilter').is(':checked');
                    var chktemp = $('#chktemp').is(':checked');
                    var twokendobox = true;
                    gd.dataSource.pageSize(len);
                    if (e.sender.dataSource._data.length == len) {
                        twokendobox = false;
                        exportfunction(e, chkall, chkfilter, chktemp, twokendobox, gd);
                    }
                    else {
                        exportfunction(e, chkall, chkfilter, chktemp, twokendobox, gd);
                    }
                    gd.dataSource.pageSize('10');
                    return false;
                },
                filterable: {
                    enabled: true,
                    delay: 1500,
                    mode: "menu, row",
                    height: 200,
                    click: function (e) {
                        var gd = $("#chklist_Grid").data("kendoGrid");
                        filter_row(gd);
                    }
                },
                filterMenuInit: function (e) {
                    var gd = $("#chklist_Grid").data("kendoGrid");
                    filter_row(gd);
                },
                change: selectRow,
                height: 450,
                sortable: true,
                selectable: true,
                selectable: "singl",   //  Grid Row Selection
                pageable: {
                    refresh: false,
                    pageSizes: true,
                    buttonCount: 5
                },
                navigatable: true,
                groupable: false,
                columns: [
                      
                    {
                        field: "activity_screen",
                        title: "Activity/Screen Name",
                        filterable: {
                            cell: {
                                operator: "contains",
                                inputWidth: 1500
                            }
                        }
                    },
                    {
                        field: "created_date",
                        title: "Created Date",
                        filterable: {
                            cell: {
                                operator: "contains",
                                inputWidth: 1500
                            }
                        }
                    },
                    {
                        field: "checklist_version",
                        title: "Checklist Version",
                        filterable: {
                            cell: {
                                operator: "contains",
                                inputWidth: 1500
                            }
                        }
                    },
                {
                    field: "status",
                    title: "Status",
                    filterable: {
                        cell: {
                            operator: "contains",
                            inputWidth: 1500
                        }
                    }
                },
                ]
            });



        $(".k-dropdown-operator").css('display', 'none');
        $("#chklist_Grid .k-input").attr('disabled', 'false');
    }
    catch (err) {
        javascript_log4j_root(arguments.callee.name, err);
    }
}
function selectRow() {
    try {
        var grid = $("#chklist_Grid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        setlocalStorage("ls_pageList", selectedItem);
    }
    catch (err) {
        javascript_log4j_root(arguments.callee.name, err);
    }
}

function statusFilter(element) {    // Dropdown list functionality
    element.kendoDropDownList({
        dataSource: status_Priority,
        optionLabel: "--Select Value--"
    });
}
    </script>
    
    
<script>
    $("#btn_Edit").bind("click", function () {
        getSerializedSelectedRows('edit');
    });

    $("#btn_View").bind("click", function () {
        getSerializedSelectedRows('view');
    });

    $("#btn_new").bind("click", function () {
        btn_onClick('Create');
        location.href = "../Checklist_DefinitionNew/Checklist_DefinitionNew";
    });

    function getSerializedSelectedRows(mode) {
        try {
            if (getlocalStorage("ls_pageList") != undefined) {
                var items = getlocalStorage("ls_pageList");
                if (items.length == 0) {
                    kendoAlert("Please select records");
                }
                else {
                    if (mode == "edit") {
                        btn_onClick('Edit');
                        location.href = "../Checklist_DefinitionNew/Checklist_DefinitionNew";
                    }
                    else if (mode == "view") {
                        btn_onClick('View');
                        location.href = "../Checklist_DefinitionNew/Checklist_DefinitionNew";
                    }
                }
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
</script>
<script>
    function generate_bank_list(res) {
        try {
            if (res != null) {
                var data = changedataType(res);
                $("#gd_chklist").empty();
                $("#gd_chklist").append("<div id='chklist_Grid'></div>");
                listgrid(data);


            }
            else {
                listgrid([]);
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }


    function listRefresh() {
        try {
            setlocalStorage('flt_condition', "");
            listpageloadfetch();
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }


</script>
