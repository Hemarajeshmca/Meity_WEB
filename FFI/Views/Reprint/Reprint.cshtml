
@{
    ViewBag.Title = "Reprint";
    Layout = "~/Views/Shared/FormViewLayout1.cshtml";
}

<form id="certificateprint" class="form-horizontal">
    <div class="panel panel-default">
        <div class="panel-body" style="padding-top:6px;padding-bottom:2px">
            <div class="row" style="padding-bottom:15px">

                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="cmb_update" class="col-sm-4 control-label required">Share Certificate To Print:</label>
                        <div class="col-sm-7">
                            <input id="cmb_update" name="share_certificate" data-role="filtercombo" style="width:100%" />
                        </div>
                        <button title="" data-placement="top" data-toggle="tooltip" class="btn btn-info" type="button" data-original-title="Refresh" onclick="mandatory()"> <span class="glyphicon glyphicon-refresh"></span></button>

                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="form-group">
                        <label for="txtValidity" class="col-sm-4 control-label required">Print Date:</label>
                        <div class=" col-sm-4">
                            <input class="cusDate" data-role='datepicker' id="txtValidity" onkeypress="return date_validate(event)" data-checkdate-msg="Enter Valid Date" name="printeddate" style="width:100%" />
                            <span data-for='valid' class='k-invalid-msg'></span>

                        </div>

                    </div>
                </div>
            </div>
            <div class="col-xs-12">
                <div id="grid_Drop_list">
                </div>
            </div>
            <div class="row" style="padding-top:10px; padding-bottom:15px">

            </div>
            @*<div class="col-sm-12">
                    <label>Print History</label>
                    <div id="grid"></div>
                </div>*@
        </div>
    </div>

</form>

<script src="~/API_Scripts/Share_App_retrieveShareCertificatePrint_APIClient.js"></script>
<script src="~/API_Scripts/Share_App_saveShareCertificatePrint_APIClient.js"></script>
<script src="~/API_Scripts/retrieveShareCertificatePrint_Model.js"></script>
<script src="~/API_Scripts/saveShareCertificatePrint_Model.js"></script>
<script src="~/API_Scripts/CertificatePrint.js"></script>
<script src="~/API_Scripts/UmoldITWebAPIProxy.js"></script>
<script src="~/CommonScripts/report.js"></script>


<script>
    $(document).ready(function () {

        $("#lblForm_menuid").text("SHRPRN");
        kendodate_format();
        //master_service();
        Form_validate_Name = $('form.form-horizontal').attr('id');
        var container = $("#certificateprint");
        kendo.init(container);
        container.kendoValidator({
        });
        Screen_Id = "SHRREPRN";
        master_userRoleNew3();


        var data = [];
        gridFilter(data);

        // $('#divUserRole4 #btnnew')
        //grid(data);
        load_master_code();
        var container = $("#certificateprint");
        kendo.init(container);
        var CertificateType = "";
        $("#cmb_update").empty();
        CertificateType = grid_comboScreen_mastercodes("QCD_Cert_Reprint");
        filter_combobox("cmb_update", CertificateType);
        $("#txtValidity").kendoDatePicker({
            value : new Date(),
            max: new Date(), // sets max date to Jan 1st, 2013
            format: "dd/MM/yyyy"
        });








    });

</script>
<script>
    function gridFilter(data) {
        try {
            $("#grid_Drop_list").kendoGrid(
                   {

                       dataSource: {
                           data:  data,
                           schema: {
                               model: {
                                   fields: {
                                       register_no: { type: "string" },
                                       fpomember_code: { type: "string" },
                                       member_name: { type: "string" },
                                       applied_shares: { type: "string" },
                                       status_desc: { type: "string" },
                                       mode_flag: { type: "string", defaultValue: "I" }
                                   }
                               }
                           }
                       },
                       //toolbar: "<a class='k-grid-add' id='btnSave' href=''><span class='fa fa-plus' style='color:Black'></span></a>",
                       height: 400,
                       groupable: false,
                       dataBinding: setDefaultValues,

                       dataBound: function (e) {
                           resultData = e.sender._data;
                           var rows = $('#grid_Drop_list').data('kendoGrid').tbody.children();
                           setColor(rows, resultData);
                       },

                       sortable: true,
                       selectable: true,


                       navigatable: true,
                       columns: [
                            {
                                field: "register_rowid",
                                title: "register_rowid",
                                width: 100,
                                hidden: true,
                            },

                            {
                                field: "register_no",
                                title: "Application No",
                                width: 100,
                                filterable: {
                                    cell: {
                                        operator: "contains",
                                        inputWidth: 1500
                                    }
                                }

                            },
                             {
                                 field: "farmer_code",
                                 title: "farmer_code",
                                 width: 100,
                                 hidden: true,
                             },
                          {
                              field: "fpomember_code",
                              title: "Member ID",
                              width: 100,
                              filterable: {
                                  cell: {
                                      operator: "contains",
                                      inputWidth: 1500
                                  }
                              }

                          },
                           {
                               field: "member_name",
                               title: "Applicant Name",
                               width: 100,
                               filterable: {
                                   cell: {
                                       operator: "contains",
                                       inputWidth: 1500
                                   }
                               }
                           },

                           {
                               field: "farmer_name",
                               title: "farmer_name",
                               width: 100,
                               hidden: true,
                           },

                               {
                                   field: "certificate_no",
                                   title: "Share Certificate No",
                                   width: 100,
                                   filterable: {
                                       cell: {
                                           operator: "contains",
                                           inputWidth: 1500
                                       }
                                   }
                               },


                         {
                             field: "applied_shares",
                             title: "Shares Applied",
                             width: 100,
                             filterable: {
                                 cell: {
                                     operator: "contains",
                                     inputWidth: 1500
                                 }
                             }
                         },

                         {
                             field: "approved_shares",
                             title: "Shares Approved",
                             width: 100,
                             filterable: {
                                 cell: {
                                     operator: "contains",
                                     inputWidth: 1500
                                 }
                             }
                         },

                         {
                             field: "rejected_shares",
                             title: "Shares Rejected",
                             width: 100,
                             filterable: {
                                 cell: {
                                     operator: "contains",
                                     inputWidth: 1500
                                 }
                             }
                         },

                           {
                               field: "status_code",
                               title: "Status",
                               hidden: true,
                               width: 100
                           },
                        {
                            field: "status_desc ",
                            title: "Status",
                            width: 100,
                            filterable: {
                                cell: {
                                    operator: "contains",
                                    inputWidth: 1500
                                }
                            }
                        },

                          {
                              field: "row_timestamp",
                              title: "Timestamp",
                              hidden: true
                          },

                       {
                           field: "mode_flag",
                           title: "Mode",
                           hidden: true
                       }
                       ],
                       editable: false,

                   });



            $(".k-dropdown-operator").css('display', 'none');
            $("#grid_Drop_list.k-input").attr('disabled', 'false');

            var gridRowID = -1;
            function sel_checkbox() {
                gridRowID++;
                return '<input id="chk_sel_' + gridRowID + '" class="checkbox" type="checkbox" />';
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }


</script>
@*/*
    <script>
        function grid(data) {
            $("#grid").kendoGrid({
                dataSource: {
                    data: data,
                    schema: {
                        model: {
                            fields: {
                                print_ref: { editable: false },
                                certificate: { editable: false },
                                print_date: { editable: false },
                                certificates_print: { editable: false },

                            }
                        }
                    },
                },
                height: 200,
                sortable: true,
                columns: [
                   {
                       field: "print_ref",
                        title: "Print Reference No"
                    }, {
                        field: "certificate",
                        title: "Certificate"
                    },
                {
                    field: "print_date",
                    title: "Printed Date"
                },
                {
                    field: "certificates_print",
                    title: "Certificates Printed"
                },


                ]
            });

        }
    </script>
    */*@
<script>
    function mandatory() {
        try {
            var mandatory_check = true;

            var grid_validate_msg = "";

            if ($('#cmb_update').data("kendoComboBox").value() == "") {
                grid_validate_msg += "Certificate Type Cannot Be Blank <br>";
                mandatory_check = false;
            }
            if (mandatory_check == false) {
                kendoAlert(grid_validate_msg);
                return false;
            }
            else {
                return listLoad();
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    function listLoad() {
        try {
            //fetch_validate();
            var mandatory_check = true;

            var grid_validate_msg = "";

            if ($('#cmb_update').data("kendoComboBox").value() == "") {
                grid_validate_msg += "Share Certificate cannot be blank <br>";
                mandatory_check = false;
            }

            if (mandatory_check == false) {
                kendoAlert(grid_validate_msg);
                return false;
            }

            var formval = form_Serialize("certificateprint");
            var obj_val = JSON.parse(formval);
            if (obj_val != undefined) {
                var org_id = getlocalStorage('org_id');
                obj_val.fpoorgn_code = org_id;
                var c = $('#cmb_update');
                obj_val.share_certificate = c.data('kendoComboBox').value()

                obj_val.printeddate = $("#txtValidity").val();

                if (obj_val.hasOwnProperty('printeddate')) {
                    if (obj_val.printeddate != '') {
                        obj_val.printeddate = getFormated_StringDate(obj_val.printeddate);
                    }
                    else {
                        obj_val.printeddate = "0";
                    }
                }

                var data = {};
                data.context = WebAPIProxy.getContext();
                data.context.Header = obj_val;

                retrieve_Certificateprint_details(data);
            }

            var colCount = $("#grid_Drop_list").find('.k-grid-header colgroup > col').length;

            //If There are no results place an indicator row
            if ($("#grid_Drop_list").data("kendoGrid").dataSource._view.length == 0) {
                $("#grid_Drop_list").find('.k-grid-content tbody')
                    .append('<tr class="kendo-data-row"><td colspan="' +
                        colCount +
                   '" style="text-align:center; padding-top:10px;background-color:#AFE4FA"><b>No pending Print Share Certificates Records.</b></td></tr>');
            }
            return false;
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    function generate_certificate_detail(res) {
        try {
            if (res != null) {
                var data = changedataType(res);

                gridFilter(data);

            }
            else {
                gridFilter([]);
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    function generate_certificate_Header(res) {

    }
    function generate_certificate_History(res) {

    }


    //function selectRow() {
    //    var grid = $("#grid_Drop_list").data("kendoGrid");
    //    var selectedItem = grid.dataItem(grid.select());
    //    setlocalStorage("ls_pageList", selectedItem);
    //}


</script>
<script>
    function save() {
        try {
            if ($("#txtMode").val() == "S") {
                $("#txtMode").val('U');

            }
            var formval = form_Serialize("certificateprint");
            var obj_val = JSON.parse(formval);
            var c = $('#cmb_update');
            obj_val.share_certificate = c.data('kendoComboBox').value();
            obj_val.fpoorgn_code = getlocalStorage('org_id');
            obj_val.certi_date = $("#txtValidity").val();

            var grid_val = JSON.stringify($("#grid_Drop_list").data().kendoGrid._data);
            var Bind = {};
            Bind = grid_val;
            var result = JSON.parse(Bind);
            if (result.length == 0) {
                kendoAlert("Atleast one record needs to be entered");
                //mandatory_check = false;
                return false;
            }
            $.each(result, function (index, value) {

                var mmode = result[index].mode_flag;
                if (mmode == "S") {
                    result[index].mode_flag = "U";
                }
            });
            var obj_grid_val = result;
            var data = {};
            data.context = WebAPIProxy.getContext();
            data.context.Header = obj_val;
            data.context.Detail = obj_grid_val;
            save_Certificateprint_details(data);



        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    function get_certificateprint_details() {
        try {
            //fetch_validate();
            //var formval = form_Serialize("certificateprint");
            //var obj_val = JSON.parse(formval);
            //var c = $('#cmb_update');
            //obj_val.payment_status = c.data('kendoComboBox').value();
            //  retrieve_PaymentStatusUpdate_details(obj_val);
            //listLoad();
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

</script>
<script>
    function load_master_code() {
        try {
            var data = {};
            data.screen_Id = "SHRPRN";
            var tab_values = ajaxcall_param("/Home/screenId_mastercodelist", JSON.stringify(data));
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }


    //function btnnew() {
    //    try {

    //        var rptclient = $find("ReportViewer1");
    //        printReport(rptclient);

    //    }
    //    catch (err) {
    //        javascript_log4j_root(arguments.callee.name, err);
    //    }
    //}

    //function printReport(report_ID) {
    //    var rv1 = $('#' + report_ID);
    //    var iDoc = rv1.parents('html');

    //    // Reading the report styles
    //    var styles = iDoc.find("head style[id$='ReportControl_styles']").html();
    //    if ((styles == undefined) || (styles == '')) {
    //        iDoc.find('head script').each(function () {
    //            var cnt = $(this).html();
    //            var p1 = cnt.indexOf('ReportStyles":"');
    //            if (p1 > 0) {
    //                p1 += 15;
    //                var p2 = cnt.indexOf('"', p1);
    //                styles = cnt.substr(p1, p2 - p1);
    //            }
    //        });
    //    }
    //    if (styles == '') { alert("Cannot generate styles, Displaying without styles.."); }
    //    styles = '<style type="text/css">' + styles + "</style>";

    //    // Reading the report html
    //    var table = rv1.find("div[id$='_oReportDiv']");
    //    if (table == undefined) {
    //        alert("Report source not found.");
    //        return;
    //    }

    //    // Generating a copy of the report in a new window
    //    var docType = '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/loose.dtd">';
    //    var docCnt = styles + table.parent().html();
    //    var docHead = '<head><title>Printing ...</title><style>body{margin:5;padding:0;}</style></head>';
    //    var winAttr = "location=yes, statusbar=no, directories=no, menubar=no, titlebar=no, toolbar=no, dependent=no, width=720, height=600, resizable=yes, screenX=200, screenY=200, personalbar=no, scrollbars=yes";;
    //    var newWin = window.open("", "_blank", winAttr);
    //    writeDoc = newWin.document;
    //    writeDoc.open();
    //    writeDoc.write(docType + '<html>' + docHead + '<body onload="window.print();">' + docCnt + '</body></html>');
    //    writeDoc.close();

    //    // The print event will fire as soon as the window loads
    //    newWin.focus();
    //    // uncomment to autoclose the preview window when printing is confirmed or canceled.
    //    // newWin.close();
    //};

</script>
<style>
    .k-widget.k-tooltip {
        background-color: #ffe79e;
        color: #6b5100;
    }

    span.k-tooltip {
        white-space: pre-line;
    }
</style>