@{
    ViewBag.Form = "Certificate Despatch";
    Layout = "~/Views/Shared/FormViewLayout2.cshtml";
}

<form id="dispatch_form" class="form-horizontal">
    <div class="panel panel-default">
        <div class="panel-body" style="padding-top:6px;padding-bottom:2px">
            <div class="row" style="padding-bottom:15px">
                <div class="col-sm-12">
                    <div class="col-sm-5">
                        <div class="form-group">
                            <label for="cmb_record" class="col-sm-4 control-label required">Despatch Status</label>
                            <div class="col-sm-7">
                                <input id="cmb_record" name="In_process_status" data-role="filtercombo" style="width:100%"   />
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-5">
                        <div class="form-group">
                            <div class="col-sm-7">
                                <button title="" data-placement="top" data-toggle="tooltip" class="btn btn-info" type="button" data-original-title="Refresh" onclick="fetch_details()"> <span class="glyphicon glyphicon-refresh"></span></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12">
                <div id="grid_Dispatch_list">
                </div>
            </div>
        </div>

    </div>
</form>
<script src="~/API_Scripts/Service_Request_saveCertificateDispatch_APIClient.js"></script>
<script src="~/API_Scripts/Service_Request_retrieveCertificateDispatch_APIClient.js"></script>
<script src="~/API_Scripts/ServiceDespatch.js"></script>
<script src="~/API_Scripts/saveCertificateDispatch_Model.js"></script>
<script src="~/API_Scripts/retrieveCertificateDispatch_Model.js"></script>
<script src="~/API_Scripts/UmoldITWebAPIProxy.js"></script>

<script>
    var permission = "";
    $(document).ready(function () {
       
         master_userRoleNew2();
        kendodate_format()
        var data = [];
        gridDispatch(data);

        Form_validate_Name = $('form.form-horizontal').attr('id');
        var container = $("#dispatch_form");
        kendo.init(container);
        container.kendoValidator({
        });
        load_master_code();
        var share_dis = "";
        $("#cmb_record").empty();
        share_dis = grid_comboScreen_mastercodes("QCD_SHA_CERT_DESP_STAT");
        filter_combobox("cmb_record", share_dis);

        Screen_Id = "SRVCDIS";
        permission = sec_Master_Permission(Screen_Id);
        $("#RIform").hide();
        $("#FPOform").hide();
    });
</script>
<script>
    function load_master_code() {
        var data = {};
        data.screen_Id = "SRVCDIS";
        var tab_values = ajaxcall_param("/Home/screenId_mastercodelist", JSON.stringify(data));
    }
</script>

<script> 
    function gridDispatch(data) {
        try {
            $("#grid_Dispatch_list").kendoGrid({
                dataSource: {
                    data: data,
                    schema: {
                        model: {
                            fields: {

                                In_servicereq_no: { type: "string", editable: false },
                                In_request_date: { type: "string", editable: false },
                                In_request_type: { type: "string", editable: false },
                                In_farmer_name: { type: "string", editable: false },
                                In_certificate_sno: { type: "string", editable: false },
                                In_distinct_from_to: { type: "string", editable: false },
                                In_printed_on: { type: "string", editable: false },
                                In_despatch_date: { type: "date", editable: true, validation: { required: { message: "despatch date cannot be blank" } } },
                                In_despatch_awb_no: { type: "string", editable: true, validation: { required: { message: "Despatch Ref.No  cannot be blank" } } },
                                In_process_status_desc: { type: "string", editable: true },
                                In_despatch_remark: { type: "string", editable: true },
                                In_mode_flag: { type: "string", defaultValue: "I" }
                            }
                        }
                    }
                },

                height: 400,
                groupable: false,
                sortable: true,
                edit: OnEdit,
                selectable: true,
                navigatable: true,
                columns: [{
                    // title: "Select", width: 40,
                   // template: '#=sel_checkbox()#'

                },
                {
                    field: "In_sel_flag",
                    title: "sel_flag",
                    hidden: true
                },
                {
                    field: "In_servicereq_rowid",
                    title: "servicereq_rowid",
                    hidden: true
                },
                    {
                        field: "In_servicereq_no",
                        title: "Service Request No",
                        width: 150

                    },

                {
                    field: "In_request_date",
                    title: "Request Date",
                    width: 150 

                },

                  {
                      field: "In_request_type",
                      title: "request_type",
                      hidden: true

                  },
                  {
                      field: "In_request_type_desc",
                      title: "Service Request Type",
                      width: 150

                  },
                   {
                       field: "In_farmer_name",
                       title: "Shareholder Name",
                       width: 150

                   },

                   {
                       field: "In_sur_name",
                       title: "sur_name",
                       width: 150,
                       hidden: true
                   },

                    {
                        field: "In_certificate_sno",
                        title: "Share Certificate No",
                        width: 150
                    },
                    {
                        field: "In_despatch_date",
                        title: "Despatch Date",
                        width: 150,
                        format: "{0:dd/MM/yyyy}"
                    },
                    {
                        field: "In_despatch_awb_no",
                        title: "Despatch Reference No",
                        width: 150
                    },
                    {
                        field: "In_distinct_from_to",
                        title: "Distinct(From-To)",
                        width: 150
                    },

                     {
                         field: "In_printed_on",
                         title: "Printed On",
                         width: 150
                     },
                    

                    {
                        field: "In_processstatus",
                        title: "process_status",
                        hidden: true
                    },
                    {
                        field: "In_process_status_desc",
                        title: "Despatch Status",
                        editor: function (container, options) {
                            combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "In_processstatus", "grid_Dispatch_list")
                        },
                        width: 100
                    },
                    {
                        field: "In_despatch_remark",
                        title: "Remarks",
                        width: 150

                    },
                      {
                          field: "In_status_code",
                          title: "Status",
                          hidden: true,
                          width: 100
                      },
                    {
                        field: "In_status_desc",
                        title: "Status",
                        width: 100
                    },
                    {
                        field: "In_chklist_status_flag",
                        title: "chklist_status_flag",
                        hidden: true
                    },
                    {
                        field: "In_mode_flag",
                        title: "Mode",
                        hidden: true
                    },
                    {
                        field: "In_row_timestamp",
                        title: "row_timestamp",
                        hidden: true
                    }],
                editable: true
            });
        }
        catch (err) {
            alert(err);
        }
    }

    load_master_code();
    In_process_status_desc_list = grid_comboScreen_mastercodes("QCD_SHA_CERT_DESP_STAT");

     var gridRowID = -1;

    function sel_checkbox() {
        gridRowID++;
        return '<input id="chk_sel_' + gridRowID + '" class="checkbox" type="checkbox" />';
    }
   
    function OnEdit(e) {
        setDefaultValues(e);

        e.container.find("input[name='despatch_date']").kendoDatePicker({
            max: new Date(), // sets max date to Jan 1st, 2013
            format: "dd/MM/yyyy"
        });         
    }
</script>

<script>     
    function fetch_details() {

        var mandatory_check = true;

        var grid_validate_msg = "";

        if ($('#cmb_record').data("kendoComboBox").value() == "") {
            grid_validate_msg += "Despatch Status cannot be blank <br>";
            mandatory_check = false;
        }

        if (mandatory_check == false) {
            kendoAlert(grid_validate_msg);
            return false;
        }

        var formval = form_Serialize("dispatch_form");
        var obj_val = JSON.parse(formval);
        var org_id = getlocalStorage('org_id');
        obj_val.In_fpoorgn_code = org_id;
        var c = $('#cmb_record');
        obj_val.register_type = c.data('kendoComboBox').value();
        var data = {};
        data.context = WebAPIProxy.getContext();
        data.context.Header = obj_val;
        var Context = data.context;
        $.ajax({
            type: "POST",
            data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, Header: Context.Header }),
            url: "/RecordService/FetchServiceList",
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                debugger;
                if (response.context.Detail != null) {
                    generate_dispatch_detail(response.context.Detail)
                    //listgrid(response.context.List);
                    //SetPager(response.context.Filter.out_record_count)
                }
                else {
                    gridDispatch([]);
                }
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }

        });
        //retrieve_dispatch_details(data);
    }

    function GridValidation() {
        debugger;
        var grid_val = JSON.stringify($("#grid_Dispatch_list").data().kendoGrid._data);
        var Bind = {};
        Bind = grid_val;
        var result = JSON.parse(Bind);

        if (result.length == 0) {
            kendoAlert("Atleast one record needs to be entered");
            return false;
        }
        var datecount = 0;
        var refcount = 0;
        var Nval = 0;
        $.each(result, function (index, value) {

            if (result[index].In_processstatus == "QCD_SHA_CERT_DESP_DONE") {
                if ((result[index].In_despatch_date == null) && (result[index].In_despatch_awb_no == "")) {

                    datecount++;
                    refcount++;
                }
                else if ((result[index].In_despatch_date != null) && (result[index].In_despatch_awb_no == "")) {
                    refcount++;
                }
                else if ((result[index].In_despatch_date == null) && (result[index].In_despatch_awb_no != "")) {
                    datecount++;
                }

            }
            else {
                Nval++;
            }

        });


        if (datecount > 0) {
            kendoAlert("Despatch Date Cannot be Empty");

        }
        if (refcount > 0) {
            kendoAlert("Despatch ref.no Cannot be Empty");
        }
        if (datecount + refcount > 0) {
            return false;
        }
        if (Nval == result.length) {
            kendoAlert("Change the Despatch Status");
            return false;
        }
        else if (datecount + refcount == 0) {
            return true;
        }
    }
    function save() {
        debugger;
        if (GridValidation()) {
        var formval = form_Serialize("dispatch_form");
        var obj_val = JSON.parse(formval);
        var org_id = getlocalStorage('org_id');
            obj_val.In_fpoorgn_code = org_id;
        var c = $('#cmb_record');
            obj_val.In_process_status = c.data('kendoComboBox').value();
        
        var grid_val1 = JSON.stringify($("#grid_Dispatch_list").data().kendoGrid._data); 
        var Bind1 = {};
        Bind1 = grid_val1;
        var result1 = JSON.parse(Bind1);
        $.each(result1, function (index, value) {
            var servicereq_rowid = value.In_servicereq_rowid;           
            var requestdate = value.In_request_date;
            if (servicereq_rowid == undefined) {
                result1[index].In_servicereq_rowid = "0";
            }
            if (requestdate != undefined || requestdate != '') {
                result1[index].In_request_date = getFormated_StringDate(requestdate);;
            }
            if (result1[index].In_despatch_date == null) {
                var d1 = new Date();
                var date1 = kendo.parseDate(d1);
                value = kendo.toString(date1, "MM/dd/yyyy");
                result1[index].In_despatch_date = value
            }
            else {
                var d = value.In_despatch_date;
                var date = kendo.parseDate(d);
                value = kendo.toString(date, "MM/dd/yyyy");
                result1[index].In_despatch_date = value;
            }
        });
        var obj_grid_val1 = result1;
        var data = {};        
        data.context = WebAPIProxy.getContext();
        data.context.Header = obj_val;
            data.context.Detail = obj_grid_val1;
            var Context = data.context;

            $.ajax({
                type: "POST",
                data: JSON.stringify({ orgnId: Context.orgnId, locnId: Context.locnId, userId: Context.userId, localeId: Context.localeId, Header: Context.Header, Detail: Context.Detail }),
                url: "/RecordService/SaveServiceDispatch",
                dataType: "json",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    debugger;
                    var Res = JSON.parse(response);
                    if (Res != null) {
                        var msg = Res.ApplicationException;
                        //retrive_SingleFetch_Details(Res.context);
                        if (Res.ApplicationException == null || Res.ApplicationException == "") {
                            kendoAlert("Certificate despatch details saved successfully");
                            get_dispatch_details()
                        }
                        else {
                            kendoAlert(Res.ApplicationException.errorDescription);
                        }


                    }
                },
                error: function (er) {
                    alert(er)
                    console.log(er)
                }

            });
        //save_dispatch_details(data);
        }
        else {
            return false;
        }
    }
    function generate_dispatch_detail(res) {       
        if (res != null) {      
                var data = changedataType(res);
                $.each(data, function (index, value) {
                    debugger;
                    var d = value.In_despatch_date;
                    var date = kendo.parseDate(d);
                    value = kendo.toString(date, "dd/MM/yyyy"); 
                    debugger;
                    data[index].In_despatch_date = value;
                });
                gridDispatch(data);             
        }
        else {
            gridDispatch([]);
        }
    }
    function get_dispatch_details()
    {
        fetch_details();
    }
    
    function load_master_code() {
        try {
            var data = {};
            data.screen_Id = "SRVCDIS";
            var tab_values = ajaxcall_param("/Home/screenId_mastercodelist", JSON.stringify(data));
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    $(function () {
        $('#cmb_record').change(function () {
            var opt = $(this).val();
            if (opt == 'QCD_SHA_CERT_DESP_PEND') {
                $('#divUserRole3 #btnnew').attr("disabled", false);
                fetch_details();

            } else {               
                $('#divUserRole3 #btnnew').attr("disabled", true);
                fetch_details();

            }
        });
    });

</script> 
<style>
    .k-widget.k-tooltip {
        background-color: #ffe79e;
        color: #6b5100;
    }

    span.k-tooltip {
        white-space: pre-line;
    }
</style>