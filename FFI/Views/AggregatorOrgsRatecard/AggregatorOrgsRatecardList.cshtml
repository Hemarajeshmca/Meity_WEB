@{
    ViewBag.List = "Rate Card ";
    Layout = "~/Views/Shared/ListViewLayout.cshtml";
}
<form id="frm_RateCard" class="form-horizontal" data-role="validator" novalidate="novalidate">
    <div class="row">
        <div class="col-xs-12">
            <div id="gd_ratecard">
                <div id="Ratecard_grid"></div>
            </div>
        </div>
    </div>
</form>

<script src="~/API_Scripts/Rate_Card_saveRateCard_APIClient.js"></script>
<script src="~/API_Scripts/Rate_Card_retrieveRateCard_APIClient.js"></script>
<script src="~/API_Scripts/Rate_Card_retrieveRateCardList_APIClient.js"></script>
<script src="~/API_Scripts/RateCard.js"></script>
<script src="~/API_Scripts/retrieveRateCard_Model.js"></script>
<script src="~/API_Scripts/retrieveRateCardList_Model.js"></script>
<script src="~/API_Scripts/saveRateCard_Model.js"></script>
<script src="~/API_Scripts/UmoldITWebAPIProxy.js"></script>

<script>
    var menuId = "";
    var permission = "";
    $(document).ready(function () {

        $(".adv_filter").attr("hdrtitle", "Rate Card List Record");
        $(".adv_filter").attr("fltid", "RateCard");
        $(".Export").attr("hdrtitle", "Rate Card List");
        $(".Export").attr("SubTreeId", "AGGR_RATE");
        list_grid_id = "Ratecard_grid";

        Screen_Id = "MAPRC";
        permission = sec_Permission(Screen_Id);
        page_load_list_permission(permission);
        setlocalStorage("ls_pageList", "");
        listpageloadfetch();
        filterhover();
    });
</script>

<script>
    function listpageloadfetch() {
        try{
        var formval = form_Serialize("frm_RateCard");
        var obj_val = JSON.parse(formval);
        obj_val.FilterBy_Option = "ALL";
        obj_val.FilterBy_Code = ".";
        if (getlocalStorage('flt_condition') != undefined && getlocalStorage('flt_condition') != "") {
            obj_val.FilterBy_FromValue = getlocalStorage('flt_condition');
        }
        else {
            obj_val.FilterBy_FromValue = ".";
        }
        obj_val.FilterBy_ToValue = ".";
        var data = {};
        data.context = WebAPIProxy.getContext();;
        data.context.Filter = obj_val;
        retrieve_RateCard_list(data);
       // setlocalStorage('flt_condition', "");
    }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    var status_Priority = [];
    function Ratecardgrid(data) {
        try{
        $.each(data, function (index, value) {
            var flag = false;
            $.each(status_Priority, function (sindex, svalue) {
                if (svalue == value.status_desc) {
                    flag = true;
                }
            });
            if (flag == false) {
                status_Priority.push(value.status_desc);
            }
        });
        $("#Ratecard_grid").kendoGrid(
         {
             dataSource: {
                 data: data,
                 pageSize: 20,
                 change: function (e) {
                     setTimeout(function () {
                         var gd = $("#Ratecard_grid").data("kendoGrid");
                         filter_row(gd);
                         $('.k-i-close').css('display', 'none');
                         $('button.k-button-icon').css('display', 'none');
                         $('#Ratecard_grid .k-input').prop('disabled', false);
                         $('#Ratecard_grid .k-input').prop('readonly', true);

                     }, 1);
                 },
             },
             toolbar: "<button type='button' id='Exportclick' class='k-grid-excel' style='display:none' href=''><span class='fa fa-file-excel-o' style='color: Black;'> &nbsp Export To Excel</span></button>",
             excelExport: function (e) {
                 var gd = $("#Ratecard_grid").data("kendoGrid");
                 var len = gd.dataSource._data.length;
                 var chkall = $('#chkall').is(':checked');
                 var chkfilter = $('#chkfilter').is(':checked');
                 var chktemp = $('#chktemp').is(':checked');
                 var twokendobox = true;
                 gd.dataSource.pageSize(len);
                 if (e.sender.dataSource._data.length == len) {
                     twokendobox = false;
                     exportfunction(e, chkall, chkfilter, chktemp, twokendobox, gd);
                 }
                 else {
                     exportfunction(e, chkall, chkfilter, chktemp, twokendobox, gd);
                 }
                 gd.dataSource.pageSize('10');
                 return false;
             },
             filterable: {
                 enabled: true,
                 delay: 1500,
                 mode: "menu, row",
                 height: 200,
                 click: function (e) {
                     var gd = $("#Ratecard_grid").data("kendoGrid");
                     filter_row(gd);
                 }
             },
             filterMenuInit: function (e) {
                 var gd = $("#Ratecard_grid").data("kendoGrid");
                 filter_row(gd);
             },
             change: selectRow,
             height: 450,
             sortable: true,
             selectable: true,
             selectable: "singl",   //  Grid Row Selection
             pageable: {
                 refresh: false,
                 pageSizes: true,
                 buttonCount: 5
             },
             navigatable: true,
             groupable: false,
             columns: [
                   {
                       field: "ratecard_rowid",
                       title: "ratecard_rowid",
                       width: 1,
                       hidden: true,
                   },
                     {
                         field: "ratecard_code",
                         title: "Rate Card ID",
                         width: 175,
                         filterable: {
                             cell: {
                                 operator: "contains",
                                 inputWidth: 1500
                             }
                         }
                     },
                      {
                          field: "aggrorgn_type",
                          title: "aggrorgn_type",
                          width: 1,
                          hidden: true,
                      },
                      {
                          field: "aggrorgn_desc",
                          title: "aggrorgn_code",
                          width: 1,
                          hidden: true,
                      },
                     {
                         field: "aggrorgn_code",
                        
                         title: "Aggregator Org.Name",
                         width: 175,
                         filterable: {
                             cell: {
                                 operator: "contains",
                                 inputWidth: 1500
                             }
                         }
                     },
                 {
                     field: "aggrorgn_type_desc",
                     title: "Aggregator Org.Type",
                     width: 175,
                     filterable: {
                         cell: {
                             operator: "contains",
                             inputWidth: 1500
                         }
                     }
                 },

                  {
                      field: "buy_sell_flag",
                      title: "Buying/Selling",
                      values: [{ text: 'Buying', value: 'B' }, { text: 'Selling', value: 'S' }, { text: 'Analyer', value: 'R' }],
                      width: 175,
                      filterable: {
                          cell: {
                              operator: "contains",
                              inputWidth: 1500
                          }
                      }
                  },
                   {
                       field: "buy_from",
                       title: "buy_from",
                       width: 1,
                       hidden: true,
                   },

                 {
                     field: "buy_from_desc",
                     title: "Buying From",
                     width: 175,
                     filterable: {
                         cell: {
                             operator: "contains",
                             inputWidth: 1500
                         }
                     }
                 },
                  {
                      field: "buy_orgn_code",
                      title: "buy_orgn_code",
                      width: 1,
                      hidden: true,
                  },
                  {
                      field: "sell_to",
                      title: "sell_to",
                      width: 1,
                      hidden: true,
                  },
                 {
                     field: "sell_to_desc",
                     title: "Selling To",
                     width: 175,
                     filterable: {
                         cell: {
                             operator: "contains",
                             inputWidth: 1500
                         }
                     }
                 },

                 {
                     field: "sell_orgn_code",
                     title: "Selling To (Name)",
                     width: 150,
                     filterable: {
                         cell: {
                             operator: "contains",
                             inputWidth: 1500
                         }
                     }

                 },

                 {
                     field: "period_from",
                     title: "Effective From",
                     width: 175,
                     filterable: {
                         cell: {
                             operator: "contains",
                             inputWidth: 1500
                         }
                     }
                 },
                 {
                     field: "period_to",
                     title: "Effective To",
                     width: 175,
                     filterable: {
                         cell: {
                             operator: "contains",
                             inputWidth: 1500
                         }
                     }
                 },

                   {
                       field: "status_code",
                       title: "status_code",
                       width: 1,
                       hidden: true,
                   },
             {
                 field: "status_desc",
                 title: "Status",
                 width: 175,
                 filterable: {
                     cell: {
                         operator: "contains",
                         inputWidth: 1500
                     }
                 }
             },
              {
                  field: "mode_flag",
                  title: "mode_flag",
                  width: 1,
                  hidden: true,
              },
               {
                   field: "row_timestamp",
                   title: "row_timestamp",
                   width: 1,
                   hidden: true,
               },
             ]

         });

        $(".k-dropdown-operator").css('display', 'none');
        $("#Ratecard_grid .k-input").attr('disabled', 'false');
    }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    function statusFilter(element) {    // Dropdown list functionality
        element.kendoDropDownList({
            dataSource: status_Priority,
            optionLabel: "--Select Value--"
        });
    }
    function selectRow() {
        try {
        var grid = $("#Ratecard_grid").data("kendoGrid");
        var selectedItem = grid.dataItem(grid.select());
        setlocalStorage("ls_pageList", selectedItem);
    }
     catch (err) {            
        javascript_log4j_root(arguments.callee.name, err);
    }
    }

</script>

<script>
    $("#btn_Edit").bind("click", function () {
        getSerializedSelectedRows('edit');
    });

    $("#btn_View").bind("click", function () {
        getSerializedSelectedRows('view');
    });

    $("#btn_new").bind("click", function () {
        btn_onClick('Create');
        location.href = "../AggregatorOrgsRatecard/AggregatorOrgRatecardForm";
    });

    function getSerializedSelectedRows(mode) {
        try {
            if (getlocalStorage("ls_pageList") != undefined) {
                var items = getlocalStorage("ls_pageList");
                if (items.length == 0) {
                    kendoAlert("Please select records");
                }
                else {
                    if (mode == "edit") {
                        btn_onClick('Edit');
                        location.href = "../AggregatorOrgsRatecard/AggregatorOrgRatecardForm";
                    }
                    else if (mode == "view") {
                        btn_onClick('View');
                        location.href = "../AggregatorOrgsRatecard/AggregatorOrgRatecardForm";
                    }
                }
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);

        }
    }
</script>

<script>
    function generate_RateCard_list(res) {
        try {
        if (res != null) {
            var data = changedataType(res);
            $("#gd_ratecard").empty();
            $("#gd_ratecard").append("<div id='Ratecard_grid'></div>");
            Ratecardgrid(data);
        }
        else {
            Ratecardgrid([]);
        }
    }
    catch (err) {
        javascript_log4j_root(arguments.callee.name, err);

    }
    }
    function listRefresh() {
        try{
        setlocalStorage('flt_condition', "");
        listpageloadfetch();
    }
    catch (err) {
        javascript_log4j_root(arguments.callee.name, err);

    }
    }
</script>













