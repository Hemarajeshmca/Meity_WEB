#pragma checksum "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\Checklist\Checklist.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "ffb7d23cc80500a7c1ad32e1421f8d4f8a68ec80"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Checklist_Checklist), @"mvc.1.0.view", @"/Views/Checklist/Checklist.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\_ViewImports.cshtml"
using FFI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\_ViewImports.cshtml"
using FFI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\_ViewImports.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ffb7d23cc80500a7c1ad32e1421f8d4f8a68ec80", @"/Views/Checklist/Checklist.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c20a4f1b02c18b9db37890379beb6b4e8cd0e608", @"/Views/_ViewImports.cshtml")]
    public class Views_Checklist_Checklist : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/CSS/popupGrid.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/API_Scripts/UmoldITWebAPIProxy.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/CommonScripts/Checklist.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("chklst_form"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("data-role", new global::Microsoft.AspNetCore.Html.HtmlString("validator"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("novalidate", new global::Microsoft.AspNetCore.Html.HtmlString("novalidate"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\Checklist\Checklist.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7d23cc80500a7c1ad32e1421f8d4f8a68ec806972", async() => {
                WriteLiteral("\r\n    <meta name=\"viewport\" content=\"width=device-width\" />\r\n    <title>Checklist</title>\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "ffb7d23cc80500a7c1ad32e1421f8d4f8a68ec807331", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7d23cc80500a7c1ad32e1421f8d4f8a68ec808513", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7d23cc80500a7c1ad32e1421f8d4f8a68ec809612", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7d23cc80500a7c1ad32e1421f8d4f8a68ec8011419", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "ffb7d23cc80500a7c1ad32e1421f8d4f8a68ec8011682", async() => {
                    WriteLiteral(@"
        <div class=""modal-header"">
            <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">&times;</button>
            <h4 id=""fahdr"" class=""modal-title""></h4>
        </div>
        <div class=""modal-header"" style=""height:49px"">
            <div class=""col-sm-12"" style=""margin-top:-7px"">
                <div class=""form-group"" style=""padding-bottom:10px"">
                    <div class=""col-sm-3"" id=""save"">
                        <button type=""button"" class=""btn btn-sm btn-primary"" id=""btnSave"" style=""width:85px"" onclick=""save_Chklst()"">
                            Save
                        </button>
                    </div>
                    <div class=""col-sm-10"">
                    </div>
                </div>
            </div>
        </div>
        <div id=""checklist_body"" class=""modal-body"" style=""height:520px"">
            <div id=""checklist_gridmain"" class=""col-sm-12"" style=""padding-bottom:10px"">
                <div id=""Checklist_grid""");
                    WriteLiteral(@"></div>
            </div>
            <div id=""checklist_grid1"" class=""col-sm-4"" style=""padding-right:3px"">
                <div id=""colorstrip"">
                    <label style=""font-weight: 600; font-size :13px"">History Details</label>
                </div><div id=""history_grid""></div>
            </div>
            <div id=""checklist_grid2"" class=""col-sm-8"" style=""padding-left:3px"">
                <div id=""history_checklist_grid""></div>
                <input type=""hidden"" id=""edit_date"" name=""In_edit_date""");
                    BeginWriteAttribute("value", " value=\"", 2002, "\"", 2010, 0);
                    EndWriteAttribute();
                    WriteLiteral(">\r\n                <input type=\"hidden\" id=\"edited_by\" name=\"In_edited_by\"");
                    BeginWriteAttribute("value", " value=\"", 2085, "\"", 2093, 0);
                    EndWriteAttribute();
                    WriteLiteral(">\r\n                <input type=\"hidden\" id=\"mode_flag\" name=\"In_mode_flag\" value=\"U\">\r\n                <input type=\"hidden\" id=\"row_id\" name=\"In_row_id\"");
                    BeginWriteAttribute("value", " value=\"", 2246, "\"", 2254, 0);
                    EndWriteAttribute();
                    WriteLiteral(">\r\n                <input type=\"hidden\" id=\"doc_rowid\" name=\"IOU_doc_rowid\"");
                    BeginWriteAttribute("value", " value=\"", 2330, "\"", 2338, 0);
                    EndWriteAttribute();
                    WriteLiteral(">\r\n                <input type=\"hidden\" id=\"doc_no\" name=\"In_doc_no\"");
                    BeginWriteAttribute("value", " value=\"", 2407, "\"", 2415, 0);
                    EndWriteAttribute();
                    WriteLiteral(">\r\n                <input type=\"hidden\" id=\"doc_type\" name=\"In_doc_type\"");
                    BeginWriteAttribute("value", " value=\"", 2488, "\"", 2496, 0);
                    EndWriteAttribute();
                    WriteLiteral(">\r\n            </div>\r\n        </div>\r\n    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
    <script>
        $(document).ready(function () {
            load_data();
            load_checklist_history([]);
            $('#save #btnSave').attr('disabled', false);
            
        });
        function load_data() {

            menuId = getlocalStorage(""MenuId"");
            console.log(menuId);
            if (
                menuId == ""ROLE"" ||
                menuId == ""USRMGMT"" ||
                menuId == ""QUICKCODE"" ||
                menuId == ""DASH"" ||
                menuId == ""MODULES"" ||
                menuId == ""AUDIT"" ||
                menuId == ""BULK"" ||
                menuId == ""FINYEAR"" ||
                menuId == ""LOCAL"" ||
                menuId == ""LOCALMENU"" ||
                menuId == ""CHKLIST"" ||
                menuId == ""DOCNUM"" ||
                menuId == ""TEMPLATES"" ||
                menuId == ""ATTR_GRP"" ||
                menuId == ""ATTR_GRP_MAP"" ||
                menuId == ""NOTIFICATION"" ||
                menuId == ""RPT_CONFIG");
                WriteLiteral(@""" ||
                menuId == ""REPORTS"" ||
                menuId == ""BANK"" ||
                menuId == ""FARMREG"" ||
                menuId == ""FARMER_PRO"" ||
                menuId == ""FPOREG"" ||
                menuId == ""FPOFMAP"" ||
                menuId == ""CAPSTRU"" ||
                menuId == ""IOFM"" ||
                menuId == ""PSHAPP"" ||
                menuId == ""ALLREG"" ||
                menuId == ""UPSALL"" ||
                menuId == ""SHRGEN"" ||
                menuId == ""SHRPRN"" ||
                menuId == ""SHRDIS"" ||
                menuId == ""SHRREF"" ||
                menuId == ""REQ"" ||
                menuId == ""SRVNAME"" ||
                menuId == ""SRVADDR"" ||
                menuId == ""SRVNOI"" ||
                menuId == ""SRVBANK"" ||
                menuId == ""SRVTRAN"" ||
                menuId == ""SRVDUP"" ||
                menuId == ""SRVUPSR"" ||
                menuId == ""SRVCDIS"" ||
                menuId == ""SRVOBJ"" ||
                menuId == ""SRVTRF"" |");
                WriteLiteral(@"|
                menuId == ""SRVDUPREG"" ||
                menuId == ""DIVMGMT"" ||
                menuId == ""SETUPDIV"" ||
                menuId == ""DIVREG"" ||
                menuId == ""DIVSTATUS"" ||
                menuId == ""FISRPT"" ||
                menuId == ""FPOLGMT"" ||
                menuId == ""FLAM"" ||
                menuId == ""FLSCH"" ||
                menuId == ""FLAN"" ||
                menuId == ""SANLET"" ||
                menuId == ""FLDISB"" ||
                menuId == ""FLDISBAG"" ||
                menuId == ""FLDISSUPD"" ||
                menuId == ""FLREPAY"" ||
                menuId == ""FLRECOV"" ||
                menuId == ""FLFCLOSE"" ||
                menuId == ""FLCLOLET"" ||
                menuId == ""FLCOLUPD"" ||
                menuId == ""SUBVENT"" ||
                menuId == ""SUBSCH"" ||
                menuId == ""SUBADGEN"" ||
                menuId == ""SUBUPDST"" ||
                menuId == ""MAPSETUP"" ||
                menuId == ""MAPAGGR"" ||
                menu");
                WriteLiteral(@"Id == ""MAPCP"" ||
                menuId == ""MAPCC"" ||
                menuId == ""MAPRC"" ||
                menuId == ""MAPMAP"" ||
                menuId == ""CPRECPT"" ||
                menuId == ""CPDISP"" ||
                menuId == ""MLKPAY"" ||
                menuId == ""PAYADV"" ||
                menuId == ""PAYSTAUPD"" ||
                menuId == ""EXPACC"" ||
                menuId == ""MBPAY"" ||
                menuId == ""MBADVGEN"" ||
                menuId == ""MBASTAUPD"" ||
                menuId == ""MAPREP"" ||
                menuId == ""CPCCUSER"" ||
                menuId == ""MAPCCMAP"" ||
                menuId == ""MLKBILL"" ||
                menuId == ""FARMREP"" ||
                menuId == ""PWCUSMAS"" ||
                menuId == ""PWVEHIMAS"" ||
                menuId == ""PWWAREHOUSE""


            ) {
                try {
                    debugger;
                    var formval = form_Serialize(""chklst_form"");
                    var obj_val = JSON.parse(formval);
          ");
                WriteLiteral(@"          if (obj_val != undefined) {
                        obj_val.doc_rowid = ""0"";
                        console.log(localStorage.docno);
                        if (localStorage.docno == """" || localStorage.docno == undefined) {
                            obj_val.doc_no = 0;
                        }
                        else {
                            obj_val.doc_no = localStorage.docno;
                        }
                        obj_val.doc_type = menuId;
                        var data = {};
                        data.context = WebAPIProxy.getContext();
                        data.context.Header = obj_val;
                        var Context = data.context;
                        $.ajax({
                            type: ""POST"",
                            //data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, doc_rowid: Context.Header.doc_rowid, doc_no: Context.Header.doc_no, doc_type: Context.H");
                WriteLiteral(@"eader.doc_type }),
                            data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, chklst_rowid: Context.Header.doc_rowid, doc_no: Context.Header.doc_no, doc_type: Context.Header.doc_type }),
                            url: ""/Checklist/Checklistfetch"",
                            dataType: ""json"",
                            contentType: 'application/json; charset=utf-8',
                            success: function (response) {
                                debugger;
                                if (response.context != null) {
                                    generate_Chek_Tran_List_element(response.context.Element)
                                    generate_Chek_Tran_List_history(response.context.History);

                                }
                                else {
                                    load_checklist([]);
                                }
                            ");
                WriteLiteral(@"    
                            },
                            error: function (er) {
                                alert(er)
                                console.log(er)
                            }

                        });
                    }
                }
                catch (err) {
                    javascript_log4j_root(arguments.callee.name, err);
                    console.log(err);
                }

            }

            else {

            }
        }
        function generate_Chek_Tran_History_List_element(res) {
            try {
                if (res != null) {

                    var data = changedataType(res);
                    console.log(res);
                    $(""#checklist_grid2"").empty();
                    $(""#checklist_grid2"").append(""<div id='history_checklist_grid'></div>"");
                    load_checklist_history(data);
                }
                else {
                    load_checklist_history([]);
       ");
                WriteLiteral(@"         }
            }
            catch (err) {
                javascript_log4j_root(arguments.callee.name, err);
            }
        }

        function generate_Chek_Tran_List_history(res) {
            try {
                if (res != null) {
                    var data1 = changedataType(res);
                    $(""#checklist_grid1"").empty();
                    $(""#checklist_grid1"").append(""<div id='history_grid'></div>"");
                    load_Historychecklist(data1);
                    var grid = $(""#history_grid"").data(""kendoGrid"");
                    var dataSource = grid.dataSource;
                    //records on current view / page
                    var recordsOnCurrentView = dataSource.view().length;
                    //total records
                    var totalRecords = dataSource.total();
                    if (recordsOnCurrentView >= 1) {
                        // kendoAlert(""Checklist Details Already Added..!"")
                        $('#save #btnSav");
                WriteLiteral(@"e').attr('disabled', true);
                    }

                }
                else {
                    load_Historychecklist([]);
                }
            }
            catch (err) {
                javascript_log4j_root(arguments.callee.name, err);
            }
        }
        function load_checklist(data) {
            try {

                $(""#Checklist_grid"").kendoGrid({
                    dataSource: {
                        data: data,
                        pageSize: 10,
                        schema: {
                            model: {
                                fields: {

                                    In_element_desc: { type: ""string"", editable: false },
                                    In_subelement_desc: { type: ""string"", editable: false },
                                    In_allowed_option: { type: ""string"", editable: false },
                                    In_element_value: { type: ""string"" },
                              ");
                WriteLiteral(@"      In_mandatory_flag: { type: ""string"", editable: false },
                                    In_verified_on: { type: ""string"", editable: false },
                                    In_verified_by: { type: ""string"", editable: false },
                                    In_complied_flag: { type: ""string"", editable: false },
                                    In_remarks: { type: ""string"" },
                                    In_mode_flag: { type: ""string"", defaultValue: ""I"" },

                                }
                            }
                        }
                    },

                    height: 250,
                    sortable: true,
                    selectable: true,
                    //change: onChangeSelection,
                    selectable: ""singl"",   //  Grid Row Selection
                    pageable: {
                        refresh: false,
                        pageSizes: true,
                        buttonCount: 5
                    },
  ");
                WriteLiteral(@"                  navigatable: true,
                    groupable: false,
                    columns: [

                        {
                            field: ""In_element_code"",
                            title: ""element_code"",
                            width: 80,
                            hidden: true
                        },
                        {
                            field: ""In_chklstelement_rowid"",
                            title: ""In_chklstelement_rowid"",
                            width: 80,
                            hidden: true
                        },
                        {
                            field: ""In_element_desc"",
                            title: ""Checklist Element"",
                            width: 150
                        },
                        {
                            field: ""In_subelement_code"",
                            title: ""subelement_code"",
                            width: 80,
                     ");
                WriteLiteral(@"       hidden: true
                        },
                        {
                            field: ""In_subelement_desc"",
                            title: ""Checklist SubElement"",
                            width: 150
                        },
                        {
                            field: ""In_allowed_option"",
                            title: ""Allowed Option"",
                            width: 100
                        },
                        {
                            field: ""In_mandatory_flag"",
                            title: ""Mandatory"",
                            template: '<input type=""checkbox"" #= In_mandatory_flag == ""Y"" ? ""checked=checked"" : """" # class=""chkbx1"" disabled=""true""></input>',
                            width: 80
                        },
                        {
                            field: ""In_element_value"",
                            title: ""Element Values"",
                            width: 200
                   ");
                WriteLiteral(@"     },
                        {
                            field: ""In_complied_flag"",
                            title: ""Complied"",
                            template: '<input type=""checkbox"" #= In_complied_flag == ""Y"" ? ""checked=checked"" : """" # class=""chkbx2 ""  ></input>',
                            width: 80
                        },
                        {
                            field: ""In_verified_on"",
                            title: ""Verified on"",
                            width: 80,
                            hidden: true
                        },
                        {
                            field: ""In_verified_by"",
                            title: ""Verified By"",
                            width: 200,
                            hidden: true

                        },
                        {
                            field: ""In_remarks"",
                            title: ""Remarks"",
                            width: 200
                    ");
                WriteLiteral(@"    },
                        {
                            field: ""In_status_code"",
                            title: ""status_code"",
                            hidden: true
                        },
                        {
                            field: ""In_mode_flag"",
                            title: ""mode_flag"",
                            hidden: true
                        },
                    ],
                    editable: true
                });
                if (($(""#DocStat"").val() == ""Active"") || ($(""#DocStat"").val() == ""Rejected"")) {
                    var len = $(""#chklst_form #Checklist_grid"").find(""tbody tr"").length;
                    for (var i = 0; i <= len; i++) {
                        var model = $(""#chklst_form #Checklist_grid"").data(""kendoGrid"").dataSource.at(i);
                        if (model) {//field names
                            model.fields[""In_element_value""].editable = true;
                            model.fields[""In_remarks""].ed");
                WriteLiteral(@"itable = true;
                            $("".chkbx2"").attr(""disabled"", false);
                        }
                    }
                }
                else {
                    var len = $(""#chklst_form #Checklist_grid"").find(""tbody tr"").length;
                    for (var i = 0; i <= len; i++) {
                        var model = $(""#Checklist_grid"").data(""kendoGrid"").dataSource.at(i);
                        if (model) {//field names
                            model.fields[""In_element_value""].editable = true;
                            model.fields[""In_remarks""].editable = true;
                            $("".chkbx2"").attr(""disabled"", false);
                        }
                    }
                }
                $("".k-dropdown-operator"").css('display', 'none');
                $(""#Checklist_grid .k-input"").attr('disabled', 'false');

                var gridRowID = -1;
                function sel_checkbox() {
                    gridRowID++;
              ");
                WriteLiteral(@"      return '<input id=""chk_sel_' + gridRowID + '"" class=""checkbox"" type=""checkbox"" />';
                }

            }
            catch (err) {
                javascript_log4j_root(arguments.callee.name, err);
            }
        }
        //Tran History Grid
        function load_Historychecklist(data1) {

            try {

                $(""#history_grid"").kendoGrid({
                    dataSource: {
                        data: data1,
                    },
                    change: onChangeSelection,
                    height: 200,
                    selectable: true,
                    scrollable: false,
                    columns: [
                        {
                            field: ""In_edit_date"",
                            title: ""Edit Date"",
                            width: 100
                        },
                        {
                            field: ""In_edited_by"",
                            title: ""Edited by"",
             ");
                WriteLiteral(@"               width: 200

                        },
                        {
                            field: ""In_mode_flag"",
                            title: ""mode_flag"",
                            width: 100,
                            hidden: true
                        }
                    ]
                });

            }
            catch (err) {
                console(err);

            }
        }
        function onChangeSelection() {
            try {

                var grid = $(""#history_grid"").data(""kendoGrid"");
                var selectedItem = grid.dataItem(grid.select());

                if (selectedItem != null) {
                    var formval = form_Serialize(""chklst_form"");
                    var obj_val = JSON.parse(formval);
                    obj_val.In_edit_date = getFormated_StringDate(selectedItem.In_edit_date);

                    obj_val.In_edited_by = selectedItem.In_edited_by;
                }
                if (obj_val.In_ro");
                WriteLiteral(@"w_id == """" || obj_val.In_row_id == undefined) {
                    obj_val.In_row_id = ""0"";
                }
                if (obj_val.In_doc_rowid == """" || obj_val.In_doc_rowid == undefined) {
                    obj_val.In_doc_rowid = ""0"";
                }
                if (localStorage.docno == """" || localStorage.docno == undefined) {
                    obj_val.In_doc_no = ""0"";
                }
                else {
                    obj_val.In_doc_no = localStorage.docno
                }

                obj_val.In_doc_type = getlocalStorage(""MenuId"");

                if (obj_val.In_mode_flag == """" || obj_val.In_mode_flag == undefined) {
                    obj_val.In_mode_flag = ""0"";
                }


                var data = {};
                data.context = WebAPIProxy.getContext();
                data.context.Header = obj_val;
                console.log(obj_val + 'Mydata');
                var Context = data.context;
                $.ajax({
             ");
                WriteLiteral(@"       type: ""POST"",
                    data: JSON.stringify({
                        userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, doc_rowid: Context.Header.In_doc_rowid, row_id: Context.Header.In_row_id, doc_no: Context.Header.In_doc_no, doc_type: Context.Header.In_doc_type, edit_date: Context.Header.In_edit_date, edited_by: Context.Header.In_edited_by, mode_flag: Context.Header.In_mode_flag
                    }),
                    url: ""/Checklist/ChecklistHISTORY"",
                    dataType: ""json"",
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        debugger;
                        if (response.context != null) {
                            generate_Chek_Tran_History_List_element(response.context.Chklist_Element);
                        }
                        else {
                            load_checklist_history([]);
              ");
                WriteLiteral(@"          }
                    },
                    error: function (er) {
                        alert(er)
                        console.log(er)
                    }

                });
            }

            catch (err) {
                javascript_log4j_root(arguments.callee.name, err);
            }
        }
        function load_checklist_history(data) {
            try {

                $(""#history_checklist_grid"").kendoGrid({
                    dataSource: {
                        data: data,
                        pageSize: 10,
                        schema: {
                            model: {
                                fields: {

                                    In_element_desc: { type: ""string"", editable: false },
                                    In_subelement_desc: { type: ""string"", editable: false },
                                    In_element_value: { type: ""string"", editable: false },
                                    In_mandatory_");
                WriteLiteral(@"flag: { type: ""string"", editable: false },

                                    In_remarks: { type: ""string"", editable: false },
                                    In_mode_flag: { type: ""string"", defaultValue: ""I"" },

                                }
                            }
                        }
                    },
                    height: 200,
                    sortable: true,
                    selectable: true,
                    //change: onChangeSelection,
                    selectable: ""singl"",   //  Grid Row Selection
                    pageable: {
                        refresh: false,
                        pageSizes: true,
                        buttonCount: 5
                    },
                    navigatable: true,
                    groupable: false,
                    columns: [

                        {
                            field: ""In_element_code"",
                            title: ""element_code"",
                            w");
                WriteLiteral(@"idth: 80,
                            hidden: true
                        },
                        {
                            field: ""In_element_desc"",
                            title: ""Checklist Element"",
                            width: 150
                        },
                        {
                            field: ""In_subelement_code"",
                            title: ""subelement_code"",
                            width: 80,
                            hidden: true
                        },
                        {
                            field: ""In_subelement_desc"",
                            title: ""Checklist SubElement"",
                            width: 150
                        },
                        {
                            field: ""In_allowed_option"",
                            title: ""Checklist Values"",
                            width: 100,
                            hidden: true
                        },
                      ");
                WriteLiteral(@"  {
                            field: ""In_mandatory_flag"",
                            title: ""Mandatory"",
                            template: '<input type=""checkbox"" #= In_mandatory_flag == ""Y"" ? ""checked=checked"" : """" # class=""chkbx1"" disabled=""true""></input>',
                            width: 80
                        },
                        {
                            field: ""In_element_value"",
                            title: ""Element Values"",
                            width: 200
                        },
                        {
                            field: ""In_complied_flag"",
                            title: ""Complied"",
                            template: '<input type=""checkbox"" #= In_complied_flag == ""Y"" ? ""checked=checked"" : """" # class=""chkbx2"" disabled=""true""></input>',
                            width: 80
                        },

                        {
                            field: ""In_remarks"",
                            title: ""Remarks"",");
                WriteLiteral(@"
                            width: 200
                        },

                        {
                            field: ""In_mode_flag"",
                            title: ""mode_flag"",
                            hidden: true
                        },
                    ],
                    editable: true
                });

                $("".k-dropdown-operator"").css('display', 'none');
                $(""#history_checklist_grid .k-input"").attr('disabled', 'false');

                var gridRowID = -1;
                function sel_checkbox() {
                    gridRowID++;
                    return '<input id=""chk_sel_' + gridRowID + '"" class=""checkbox"" type=""checkbox"" />';
                }

            }
            catch (err) {
                javascript_log4j_root(arguments.callee.name, err);
            }
        }
    </script>
    <script>
        function save_Chklst() {
            debugger;

            if (menuId == ""PSHAPP"") {
                t");
                WriteLiteral(@"ry {

                    var docno = localStorage.docno;
                    var datacheck = true;
                    var grid_val = JSON.stringify($(""#Checklist_grid"").data().kendoGrid._data);
                    var Bind = {};
                    Bind = grid_val;
                    var result = JSON.parse(Bind);
                    $.each(result, function (index, value) {
                        debugger;
                        var elname0 = result[0].In_element_value;
                        var elname1 = result[1].In_element_value;

                        var elname2 = result[2].In_element_value;

                        var Complied0 = result[0].In_complied_flag;

                        var Complied1 = result[1].In_complied_flag;

                        var Complied2 = result[2].In_complied_flag;

                        //var elname2 = result[2].In_element_value;

                        if (elname0 == """" || elname0 == undefined || elname1 == """" || elname1 == undefined) {
");
                WriteLiteral(@"                            datacheck = false;
                            kendoAlert(""Element value cannot be Empty"");
                            return false;
                        }
                        if (Complied0 == """" || Complied0 == undefined || Complied1 == """" || Complied1 == undefined) {
                            datacheck = false;
                            kendoAlert(""Complied value cannot be Empty"");
                            return false;
                        }

                        if (elname2 != """" && Complied2 == """") {
                            datacheck = false;
                            kendoAlert(""Complied value cannot be Empty"");
                            return false;
                        }

                    });

                    //var grid = $('#Checklist_grid').data().kendoGrid;
                    //$.each(grid.dataSource.view(), function () {
                    //    var ischecked = grid.tbody.find("":checked"")
                   ");
                WriteLiteral(@" //    var strSelectedIds = """";
                    //    $.each(ischecked, function () {

                    //    });


                    //});
                    var AllowEqualtstoElement = false;
                    //$(""#Checklist_grid  tbody"").find('tr').each(function () {
                    //    debugger;
                    //    var id = $(""#Checklist_grid  tbody"").find('.chkbx2').val();
                    //    var IsAdd = $(""#Checklist_grid  tbody"").find('.chkbx2').hasClass('k-state-selected');
                    //    // var checkid = $(""#Checklist_grid  tbody"").find('.chkbx2').not("":checked"")
                    //    var checkid = $(""#Checklist_grid  tbody"").find('.chkbx2').not("":checked"")
                    //    if (checkid.length > 1) {
                    //        datacheck = false;
                    //    }
                    //});
                    if (datacheck) {
                        try {
                            $.each(result, function (index, v");
                WriteLiteral(@"alue) {
                                if (docno != """" || docno != undefined) {
                                    result[index].In_doc_no = docno;
                                }
                                else {
                                    result[index].In_doc_no = ""0"";
                                }
                                result[index].IOU_doc_rowid = ""0"";

                                result[index].In_doc_type = getlocalStorage(""MenuId"");
                                var mmode = result[index].In_mode_flag;
                                if (mmode == ""S"") {
                                    result[index].In_mode_flag = ""U"";
                                }


                                var AllowsOption = result[index].In_allowed_option;
                                var ElementValue = result[index].In_element_value;
                                var SplitString = AllowsOption.split(""/"");
                                for (var i = 0; i < Sp");
                WriteLiteral(@"litString.length; i++) {
                                    if (SplitString[i].includes(ElementValue)) {
                                        AllowEqualtstoElement = false;
                                        break;
                                    }
                                    else {
                                        AllowEqualtstoElement = true;
                                    }
                                }
                            });
                        }
                        catch (err) {
                            avascript_log4j_root(arguments.callee.name, err);
                        }
                        if (AllowEqualtstoElement == false) {
                            var obj_val = result;
                            var data_save = {};
                            data_save.context = WebAPIProxy.getContext();
                            data_save.context.Element = obj_val;
                            var Context = data_save.context");
                WriteLiteral(@";
                            $.ajax({
                                type: ""POST"",
                                data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, Element: Context.Element }),
                                url: ""/Checklist/ChecklistSave"",
                                dataType: ""json"",
                                contentType: 'application/json; charset=utf-8',
                                success: function (response) {
                                    console.log(response)
                                    var Res = JSON.parse(response);
                                    if (Res.context != null) {
                                        var mode = $(""#txtMode"").val();
                                        if (mode == ""I"") {
                                            setlocalStorage('chklst', 'save');
                                            kendoAlert(""CheckList saved successfully");
                WriteLiteral(@""");
                                            get_CheckList_Tran_details(Res.context.Header);
                                        }
                                        else if (mode == ""D"") {
                                            setlocalStorage('chklst', 'ignore');
                                            kendoAlert(""CheckList inactivate successfully"");
                                            get_CheckList_Tran_details(Res.context.Header);
                                        }
                                        else {
                                            kendoAlert(""CheckList saved successfully"");
                                            setlocalStorage('chklst', 'save');
                                            get_CheckList_Tran_details(Res.context.Header);
                                        }
                                    }
                                    else {
                                        kendoAlert(Res.ApplicationExce");
                WriteLiteral(@"ption.errorDescription);
                                    }
                                },
                                error: function (er) {
                                    alert(er)
                                    console.log(er)
                                }

                            });
                            console.log(getlocalStorage('chklst'))
                        }
                        else {
                            kendoAlert(""Element values should be equal to the Allowed Options Maintained"");
                        }
                    }
                    //  else {
                    //    kendoAlert(""Element value cannot be Empty"");
                    //}


                }
                catch (err) {
                    javascript_log4j_root(arguments.callee.name, err);
                }
            }
            else {
                try {
                    var docno = localStorage.docno;
                    var da");
                WriteLiteral(@"tacheck = true;
                    var grid_val = JSON.stringify($(""#Checklist_grid"").data().kendoGrid._data);
                    var Bind = {};
                    Bind = grid_val;
                    var result = JSON.parse(Bind);
                    $.each(result, function (index, value) {
                        var elname0 = result[0].In_element_value;
                        var elname1 = result[1].In_element_value;

                        // var elname2 = result[2].In_element_value;

                        if (elname0 == """" || elname0 == undefined || elname1 == """" || elname1 == undefined) {
                            datacheck = false;
                            kendoAlert(""Complied value cannot be Empty"");
                        }
                    });

                    //var grid = $('#Checklist_grid').data().kendoGrid;
                    //$.each(grid.dataSource.view(), function () {
                    //    var ischecked = grid.tbody.find("":checked"")
              ");
                WriteLiteral(@"      //    var strSelectedIds = """";
                    //    $.each(ischecked, function () {

                    //    });


                    //});

                    $(""#Checklist_grid  tbody"").find('tr').each(function () {
                        debugger;
                        var id = $(""#Checklist_grid  tbody"").find('.chkbx2').val();
                        var IsAdd = $(""#Checklist_grid  tbody"").find('.chkbx2').hasClass('k-state-selected');
                        var checkid = $(""#Checklist_grid  tbody"").find('.chkbx2').not("":checked"")
                        if (checkid.length > 0) {
                            datacheck = false;
                        }
                    });


                    if (datacheck) {
                        $.each(result, function (index, value) {
                            if (docno != """" || docno != undefined) {
                                result[index].In_doc_no = docno;
                            }
                          ");
                WriteLiteral(@"  else {
                                result[index].In_doc_no = ""0"";
                            }
                            result[index].IOU_doc_rowid = ""0"";

                            result[index].In_doc_type = getlocalStorage(""MenuId"");
                            var mmode = result[index].In_mode_flag;
                            if (mmode == ""S"") {
                                result[index].In_mode_flag = ""U"";
                            }
                        });
                        var obj_vallength = result.length;
                        if (obj_vallength != 0) {
                            var obj_val = result;
                            var data_save = {};
                            data_save.context = WebAPIProxy.getContext();
                            data_save.context.Element = obj_val;
                            var Context = data_save.context;
                            var obj_val = result.length;
                            $.ajax({
              ");
                WriteLiteral(@"                  type: ""POST"",
                                data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, Element: Context.Element }),
                                url: ""/Checklist/ChecklistSave"",
                                dataType: ""json"",
                                contentType: 'application/json; charset=utf-8',
                                success: function (response) {
                                    console.log(response)
                                    var Res = JSON.parse(response);
                                    if (Res.context != null) {
                                        var mode = $(""#txtMode"").val();
                                        if (mode == ""I"") {
                                            setlocalStorage('chklst', 'save');
                                            kendoAlert(""CheckList saved successfully"");
                                            get_Ch");
                WriteLiteral(@"eckList_Tran_details(Res.context.Header);
                                        }
                                        else if (mode == ""D"") {
                                            setlocalStorage('chklst', 'ignore');
                                            kendoAlert(""CheckList inactivate successfully"");
                                            get_CheckList_Tran_details(Res.context.Header);
                                        }
                                        else {
                                            kendoAlert(""CheckList saved successfully"");
                                            setlocalStorage('chklst', 'save');
                                            get_CheckList_Tran_details(Res.context.Header);
                                        }
                                    }
                                    else {
                                        kendoAlert(Res.ApplicationException.errorDescription);
                             ");
                WriteLiteral(@"       }
                                },
                                error: function (er) {
                                    alert(er)
                                    console.log(er)
                                }

                            });
                            console.log(getlocalStorage('chklst'))
                        }
                        else {
                            kendoAlert(""Kindly Enter the Referred Data"");
                        }
                    } else {
                        kendoAlert(""Element value cannot be Empty"");
                    }

                }
                catch (err) {
                    javascript_log4j_root(arguments.callee.name, err);
                }
            }
        }
        function get_CheckList_Tran_details(res) {
            var formval = form_Serialize(""chklst_form"");
            var obj_val = JSON.parse(formval);
            if (obj_val != undefined) {
                obj_val.doc_rowi");
                WriteLiteral(@"d = ""0"";
                if (obj_val.In_doc_no == """" || obj_val.In_doc_no == undefined) {
                    obj_val.doc_no = 0;
                }
                else {
                    obj_val.doc_no = localStorage.docno
                }
                obj_val.doc_type = menuId;
                var data = {};
                data.context = WebAPIProxy.getContext();
                data.context.Header = obj_val;
                var Context = data.context;
                $.ajax({
                    type: ""POST"",
                    data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, doc_rowid: Context.Header.doc_rowid, doc_no: Context.Header.doc_no, doc_type: Context.Header.doc_type }),
                    url: ""/Checklist/Checklistfetch"",
                    dataType: ""json"",
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                   ");
                WriteLiteral(@"     debugger;
                        if (response.context != null) {
                            generate_Chek_Tran_List_element(response.context.Element)
                            generate_Chek_Tran_List_history(response.context.History);
                        }
                        else {
                            load_checklist([]);
                        }
                    },
                    error: function (er) {
                        alert(er)
                        console.log(er)
                    }

                });
            }
        }
        function get_CheckList_Tran_details(res) {
            var formval = form_Serialize(""chklst_form"");
            var obj_val = JSON.parse(formval);
            if (obj_val != undefined) {
                obj_val.doc_rowid = 0;

                obj_val.doc_no = localStorage.docno

                obj_val.doc_type = menuId;
                var data = {};
                data.context = WebAPIProxy.getContext");
                WriteLiteral(@"();
                data.context.Header = obj_val;
                var Context = data.context;
                $.ajax({
                    type: ""POST"",
                    data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, doc_rowid: Context.Header.doc_rowid, doc_no: Context.Header.doc_no, doc_type: Context.Header.doc_type }),
                    url: ""/Checklist/Checklistfetch"",
                    dataType: ""json"",
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        debugger;
                        if (response.context != null) {
                            generate_Chek_Tran_List_element(response.context.Element)
                            generate_Chek_Tran_List_history(response.context.History);
                        }
                        else {
                            load_checklist([]);
                        }");
                WriteLiteral(@"
                    },
                    error: function (er) {
                        alert(er)
                        console.log(er)
                    }

                });
            }
        }

    </script>
    <script>
        $(function () {
            $('#Checklist_grid').on('click', '.chkbx1', function () {
                var checked = $(this).is(':checked');
                var grid = $('#Checklist_grid').data().kendoGrid;
                var dataItem = grid.dataItem($(this).closest('tr'));
                var row = $(this).closest('tr');
                if (checked == true) {
                    dataItem._set('In_mandatory_flag', 'Y');
                }
                else {
                    dataItem._set('In_mandatory_flag', 'N');
                }
            });
        });
        $(function () {
            $('#Checklist_grid').on('click', '.chkbx2', function () {
                var checked = $(this).is(':checked');
                var grid = $('");
                WriteLiteral(@"#Checklist_grid').data().kendoGrid;
                var dataItem = grid.dataItem($(this).closest('tr'));
                var row = $(this).closest('tr');
                if (checked == true) {
                    dataItem._set('In_complied_flag', 'Y');
                }
                else {
                    dataItem._set('In_complied_flag', 'N');
                }
            });
        });
    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n<style>\r\n    .breadcrumb > li + li:before {\r\n        color: #E6E6E6;\r\n    }\r\n</style>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
