#pragma checksum "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\ICDStockIssue\StockIssueConfirm.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "f86af0f296dba17039383754d7b44bcb531dd7c6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ICDStockIssue_StockIssueConfirm), @"mvc.1.0.view", @"/Views/ICDStockIssue/StockIssueConfirm.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\_ViewImports.cshtml"
using FFI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\_ViewImports.cshtml"
using FFI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\_ViewImports.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f86af0f296dba17039383754d7b44bcb531dd7c6", @"/Views/ICDStockIssue/StockIssueConfirm.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c20a4f1b02c18b9db37890379beb6b4e8cd0e608", @"/Views/_ViewImports.cshtml")]
    public class Views_ICDStockIssue_StockIssueConfirm : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("frm_issue"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("data-role", new global::Microsoft.AspNetCore.Html.HtmlString("validator"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("novalidate", new global::Microsoft.AspNetCore.Html.HtmlString("novalidate"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/API_Scripts/UmoldITWebAPIProxy.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\ICDStockIssue\StockIssueConfirm.cshtml"
  
    ViewBag.List = "Stock Issue Confirm";
    Layout = "~/Views/Shared/ListViewLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral("<style>\r\n    .pull-right {\r\n        margin-top: -1%;\r\n    }\r\n</style>\r\n\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86af0f296dba17039383754d7b44bcb531dd7c65819", async() => {
                WriteLiteral("\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12\">\r\n            <div id=\"gd_issue\">\r\n                <div id=\"Issue_grid\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "f86af0f296dba17039383754d7b44bcb531dd7c67586", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

<script>
    var menuId = """";
    var permission = """";
    $(document).ready(function () {
        $("".adv_filter"").attr(""hdrtitle"", ""Stock Inward List Record"");
        $("".adv_filter"").attr(""fltid"", ""Inward"");
        $("".Export"").attr(""hdrtitle"", ""Stock Issue"");
        $("".Export"").attr(""SubTreeId"", ""Stock_Inward"");
        list_grid_id = ""Issue_grid"";
        listpageloadfetch();
        Screen_Id = ""ICDISSUECONFM"";
        permission = sec_Permission(Screen_Id);
        debugger;
        //page_load_list_permission(permission);
        setlocalStorage(""ls_pageList"", """");
        filterhover();
        $(""#RI"").hide();
        $(""#FPO"").hide();
    });
</script>

<script>
    function listpageloadfetch() {
        try {
            var formval = form_Serialize(""frm_issue"");
            var obj_val = JSON.parse(formval);
            obj_val.FilterBy_Option = ""ALL"";
            obj_val.FilterBy_Code = ""."";
            if (getlocalStorage('flt_condition') != undefined && getl");
            WriteLiteral(@"ocalStorage('flt_condition') != """") {
                obj_val.FilterBy_FromValue = getlocalStorage('flt_condition');
            }
            else {
                obj_val.FilterBy_FromValue = ""."";
            }
            obj_val.FilterBy_ToValue = ""."";
            var data = {};
            data.context = WebAPIProxy.getContext();;
            data.context.Filter = obj_val;
            var Context = data.context;
            var data = { user: Context.userId, org: Context.orgnId, locn: Context.locnId, lang: Context.localeId, filterby_option: Context.Filter.FilterBy_Option, filterby_code: Context.Filter.FilterBy_Code, filterby_fromvalue: Context.Filter.FilterBy_FromValue, filterby_tovalue: Context.Filter.FilterBy_ToValue, issue_status: ""QCD_INWARD_CONFIRMISSUE"" };
             $.ajax({
            url: '");
#nullable restore
#line 63 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\ICDStockIssue\StockIssueConfirm.cshtml"
             Write(Url.Action("IssueList", "ICDStockIssue"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            type: ""post"",
            contentType: 'application/x-www-form-urlencoded',
            data: data,
                 success: function (response) {
                   console.log(response);
                     if (response != null) {
                         Issuegrid(response.IssueTransferList);
                }
                else {
                    Issuegrid([]);
                }
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function selectRow() {
        try {
            var grid = $(""#Issue_grid"").data(""kendoGrid"");
            var selectedItem = grid.dataItem(grid.select());
            setlocalStorage(""ls_pageList"", selectedItem);
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    va");
            WriteLiteral(@"r status_Priority = [];
    function Issuegrid(data) {
        try {
            $(""#Issue_grid"").kendoGrid(
                {
                    excel: {
                        fileName: ""Stock Inward List.xlsx"",
                        filterable: true,
                        allPages: false
                    },
                    dataSource: {
                        data: data,
                        pageSize: 20,
                        change: function (e) {
                            setTimeout(function () {
                                var gd = $(""#Issue_grid"").data(""kendoGrid"");
                                filter_row(gd);
                                $('.k-i-close').css('display', 'none');
                                $('button.k-button-icon').css('display', 'none');
                                $('#Issue_grid .k-input').prop('disabled', false);
                                $('#Issue_grid .k-input').prop('readonly', true);

                            ");
            WriteLiteral(@"}, 1);
                        },
                    },
                    toolbar: ""<button type='button' id='Exportclick' class='k-grid-excel' style='display:none' href=''><span class='fa fa-file-excel-o' style='color: Black;'> &nbsp Export To Excel</span></button>"",
                    excelExport: function (e) {
                        var gd = $(""#Issue_grid"").data(""kendoGrid"");
                        var gd_fi = $(""#Issue_grid"").data(""kendoGrid"").dataSource;
                        var filters = gd_fi.filter();
                        var allData = gd_fi.data();
                        var query = new kendo.data.Query(allData);
                        var data = query.filter(filters).data;
                        var data_tt = gd.dataSource.data();

                        var sheet = e.workbook.sheets[0];
                        var gridColumns = gd.columns;

                        var columnCells = [];
                        for (var c = 0; c < gridColumns.length; c++) {
       ");
            WriteLiteral(@"                     var fieldName = gd.columns[c].hidden;
                            if (typeof (fieldName) === ""undefined"") {
                                var cellValue = gridColumns[c].title ? gridColumns[c].title : gridColumns[c].field;
                                columnCells.push({ value: cellValue, autoWidth: true, background: ""#7a7a7a"", color: ""#fff"" });
                            }
                        }
                        var rows = [{ cells: columnCells, type: ""header"" }];
                        for (var i = 0; i < data.length; i++) {
                            var rowCells = [];
                            for (var j = 0; j < gridColumns.length; j++) {

                                var fieldName = gd.columns[j].hidden;
                                if (typeof (fieldName) === ""undefined"") {
                                    var cellValue = data[i][gridColumns[j].field];
                                    rowCells.push({ value: cellValue });
                 ");
            WriteLiteral(@"               }
                            }
                            rows.push({ cells: rowCells, type: ""data"" });
                        }
                        sheet.rows = rows;
                        return false;
                    },
                    //filterable: {
                    //    enabled: false,
                    //    delay: 1500,
                    //    //  mode: ""menu, row"",
                    //    height: 200,
                    //    click: function (e) {
                    //        var gd = $(""#Issue_grid"").data(""kendoGrid"");
                    //        filter_row(gd);
                    //    }
                    //},
                    filterable: true,
                    resizable:true,
                    filterMenuInit: function (e) {
                        var gd = $(""#Issue_grid"").data(""kendoGrid"");
                        filter_row(gd);
                    },
                    change: selectRow,
                    height");
            WriteLiteral(@": 450,
                    sortable: true,
                    selectable: true,
                    selectable: ""singl"",   //  Grid Row Selection
                    pageable: {
                        refresh: false,
                        pageSizes: true,
                        buttonCount: 5
                    },
                    navigatable: true,
                    groupable: false,
                    columns: [
                        {
                            field: ""Out_inward_rowid"",
                            title: ""inward_rowid"",
                            hidden: true,
                        },
                        {
                            field: ""Out_ic_code"",
                            title: ""ic_code"",
                            hidden: true,
                        },
                        {
                            field: ""Out_ic_name"",
                            title: ""Input Centre Name"",

                            filterable: {
");
            WriteLiteral(@"                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 200
                        },
                        {
                            field: ""product_code"",
                            title: ""Product Name"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 200
                        },


                        {
                            field: ""Out_grn_no"",
                 ");
            WriteLiteral(@"           title: ""GRN NO"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 150
                        },
                        {
                            field: ""Out_grn_date"",
                            title: ""GRN Date"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 150
                        },
                        {
   ");
            WriteLiteral(@"                         field: ""Out_supplier_name"",
                            title: ""Suplier Name"",
                            hidden: true,
                            width: 200
                        },
                        {
                            field: ""Out_product_name"",
                            title: ""product Name"",
                            hidden: true,
                            width: 200
                        },
                        {
                            field: ""Out_supplier_location"",
                            title: ""Suplier Location"",
                            hidden: true,
                            width: 150
                        },
                        {
                            field: ""Out_from_state"",
                            title: ""From State"",
                            hidden: true,
                            width: 150
                        },
                        {
                            field: ""O");
            WriteLiteral(@"ut_status_code"",
                            title: ""Status"",
                            hidden: true,
                        },
                        {
                            field: ""received_qty"",
                            title: ""Received Qty"",
                            template: '#= kendo.toString(received_qty, ""n2"") #',
                            attributes: { style: ""text-align:right;"" },
                        },
                        {
                            field: ""accepted_qty"",
                            title: ""Accepted Qty"",
                            template: '#= kendo.toString(accepted_qty, ""n2"") #',
                            attributes: { style: ""text-align:right;"" },
                        },
                        {
                            field: ""uom_code"",
                            title: ""uom_code"",
                            hidden: true,
                            width: 150
                        },
                        {
");
            WriteLiteral(@"                            field: ""noofstock"",
                            title: ""noofstock"",
                            hidden: true,
                            width: 150
                        }
                    ]
                });
            $("".k-dropdown-operator"").css('display', 'none');
            $(""#Issue_grid .k-input"").attr('disabled', 'false');
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function selectRow() {
        debugger;
        try {
            var grid = $(""#Issue_grid"").data(""kendoGrid"");
            var selectedItem = grid.dataItem(grid.select());
            setlocalStorage(""ls_pageList"", selectedItem);
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
</script>
<script>

    $(""#btn_Edit"").bind(""click"", function () {
        getSerializedSelectedRows('edit');
    });
    $(""#btn_View"").bind(""click"", function ()");
            WriteLiteral(@" {
        getSerializedSelectedRows('view');
    });
    $(""#btn_new"").bind(""click"", function () {
        debugger;
        btn_onClick('Create');
        location.href = ""../ICDStockIssue/IssueConfirmForm"";
    });

    function getSerializedSelectedRows(mode) {
        try {
            if (getlocalStorage(""ls_pageList"") != undefined) {
                var items = getlocalStorage(""ls_pageList"");
                if (items.length == 0) {
                    kendoAlert(""Please select records"");
                }

                else {
                    if (mode == ""edit"") {
                        btn_onClick('Edit');
                        location.href = ""../ICDStockIssue/IssueConfirmForm"";
                    }
                    else if (mode == ""view"") {
                        btn_onClick('View');
                        location.href = ""../ICDStockIssue/IssueConfirmForm"";
                    }
                }
            }
        }
        catch (err) {
          ");
            WriteLiteral(@"  javascript_log4j_root(arguments.callee.name, err);
        }
    }


</script>
<script>
    function generate_Stockinward_list(res) {
        try {
            if (res != null) {
                var data = changedataType(res);
                $(""#gd_issue"").empty();
                $(""#gd_issue"").append(""<div id='Issue_grid'></div>"");
                Issuegrid(data);
            }
            else {
                Issuegrid([]);
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function listRefresh() {
        try {
            setlocalStorage('flt_condition', """");
            listpageloadfetch();
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
