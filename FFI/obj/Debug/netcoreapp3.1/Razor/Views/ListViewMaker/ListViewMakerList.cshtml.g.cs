#pragma checksum "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\ListViewMaker\ListViewMakerList.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8d806a58a14c869a3be14f4e158be6d29e463eae"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_ListViewMaker_ListViewMakerList), @"mvc.1.0.view", @"/Views/ListViewMaker/ListViewMakerList.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\_ViewImports.cshtml"
using FFI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\_ViewImports.cshtml"
using FFI.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\_ViewImports.cshtml"
using Kendo.Mvc.UI;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8d806a58a14c869a3be14f4e158be6d29e463eae", @"/Views/ListViewMaker/ListViewMakerList.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c20a4f1b02c18b9db37890379beb6b4e8cd0e608", @"/Views/_ViewImports.cshtml")]
    public class Views_ListViewMaker_ListViewMakerList : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("frm_fdr_freg"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("form-horizontal"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("data-role", new global::Microsoft.AspNetCore.Html.HtmlString("validator"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("novalidate", new global::Microsoft.AspNetCore.Html.HtmlString("novalidate"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\ListViewMaker\ListViewMakerList.cshtml"
  
    ViewBag.List = "Farmer Registration";
    ViewBag.helpName = "FarmerRegistration.html";
    Layout = "~/Views/Shared/ListViewLayout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"<style>
    #loader {
        position: fixed;
        left: 0px;
        top: 0px;
        width: 100%;
        height: 100%;
        z-index: 9999;
        opacity: 0.5;
        background: url('../../images/LoadingImg.gif') 50% 50% no-repeat rgb(0,0,0);
    }
</style>
");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8d806a58a14c869a3be14f4e158be6d29e463eae5542", async() => {
                WriteLiteral("\r\n    <div class=\"row\">\r\n        <div class=\"col-xs-12\">\r\n            <div id=\"gd_LVMarker\">\r\n                <div id=\"LVMarker\"></div>\r\n                <div id=\"pager\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n   <div id=\"loader\"></div>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
<script>
    click_act_name = ""ListViewMakerForm"";
    click_ctrl_name = ""ListViewMaker"";
    form_list_url = '../' + click_ctrl_name + '/' + click_act_name;
</script>
<script>
    var menuId = """";
    var permission = """";
    var gridrecord;
    $(document).ready(function () {
        //listpageloadfetch(0, 20);
        debugger;
        $("".adv_filter"").attr(""hdrtitle"", ""Farmer Registration Record"");
        $("".adv_filter"").attr(""fltid"", ""FDRREG"");
        $("".Export"").attr(""hdrtitle"", ""Farmer Registration List"");
        $("".Export"").attr(""SubTreeId"", ""Farmer_reg"");
        list_grid_id = ""LVMarker"";
        Screen_Id = ""FARMREG"";
        permission = sec_Permission(Screen_Id);
        //page_load_list_permission(permission);
        setlocalStorage(""ls_pageList"", """");
        $(""#loader"").fadeIn();
        //filterhover();
        role_ri();
        listgrid([]);        
    });

     function role_ri() {
        /*  Prema added for fpo based abd ri user base loading*/
    ");
            WriteLiteral(@"    var role = getlocalStorage(""orgn_level"")
        if (role == ""ORG_FO"") {
            debugger;
            filter_combobox(""cmb_RIBelong"", getlocalStorage(""rilist""));
            filter_combobox(""cmb_FPOBelong"", getlocalStorage(""fpolist""));
            $(""#cmb_FPOBelong"").data(""kendoComboBox"").value(""ALL"");
            var cmb_ri = $(""#cmb_RIBelong"").data(""kendoComboBox"");
            cmb_ri.value(getlocalStorage(""org_id""));
            $(""#RI"").show();
            $(""#cmb_RIBelong"").data(""kendoComboBox"").enable(false);
            $(""#FPO"").show();
            $(""#cmb_FPOBelong"").data(""kendoComboBox"").enable(true);
            fpoload();
            Overwritegrid();
        }
        if (role == ""ORG_PF"") {
            debugger;
            filter_combobox(""cmb_RIBelong"", getlocalStorage(""rilist""));
            $(""#cmb_RIBelong"").data(""kendoComboBox"").value(""ALL"");
            filter_combobox(""cmb_FPOBelong"", getlocalStorage(""fpolist""));
            $(""#cmb_FPOBelong"").data(""kendoComb");
            WriteLiteral(@"oBox"").value(""ALL"");
            $(""#RI"").show();
            $(""#cmb_RIBelong"").data(""kendoComboBox"").enable(true);
            $(""#FPO"").show();
            $(""#cmb_FPOBelong"").data(""kendoComboBox"").enable(true);
            fpoload();
            Overwritegrid();
        }
        if (role == ""ORG_FPO"") {
            debugger;
            filter_combobox(""cmb_RIBelong"", getlocalStorage(""rilist""));
            filter_combobox(""cmb_FPOBelong"", getlocalStorage(""fpolist""));
            var cmb_ri = $(""#cmb_RIBelong"").data(""kendoComboBox"");
            cmb_ri.value(getlocalStorage(""parent_code""));
            $(""#RI"").show();
            $(""#cmb_RIBelong"").data(""kendoComboBox"").enable(false);
            $(""#FPO"").show();
            $(""#cmb_FPOBelong"").data(""kendoComboBox"").enable(false);           
            var cmap_insel = $(""#cmb_FPOBelong"").data(""kendoComboBox"");
          //  cmap_insel.value(getlocalStorage(""org_id""));
            cmap_insel.value(getlocalStorage(""org_code""));
   ");
            WriteLiteral(@"         Overwritegrid();
        }
              /*  prema ended*/
    }
    function fpoload() {
        var data = {};
            data.userId = getlocalStorage(""User_Id_Value"");
        var orgnid = $(""#cmb_RIBelong"").data(""kendoComboBox"").value();
            var user_code = data.userId;
            var data1 = {User_code: user_code, orgn_code: orgnid}
            $.ajax({
            url: '");
#nullable restore
#line 116 "D:\Live\Meity\Updated\FEB-06-2023\WEB\meity-web-frontend\FFI\Views\ListViewMaker\ListViewMakerList.cshtml"
             Write(Url.Action("GetFPOlist", "Login"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"',
            type: ""post"",
            contentType: 'application/x-www-form-urlencoded',
            data: data1,
            success: function (response1) {
            debugger;
                var url_path = JSON.parse(response1);
                var itemArrFPO = [];
                for (var i = 0; i < url_path.Table.length; i++) {
                    var list = {};
                    list.id = url_path.Table[i].serial_number;
                    list.code = url_path.Table[i].dist_code;
                    list.desc = url_path.Table[i].Member_district_name;
                    itemArrFPO.push(list);
                }
                filter_combobox(""cmb_FPOBelong"", itemArrFPO);
            },
                error: function (er)
                {
                alert(er)
                console.log(er)
                }
            });
    }
    function listfetch(st_index, end_index) {
        try {
            var formval = form_Serialize(""frm_fdr_freg"");
            var ob");
            WriteLiteral(@"j_val = JSON.parse(formval);
            obj_val.FilterBy_Option = ""ALL"";
            obj_val.FilterBy_Code = ""."";
            if (getlocalStorage('flt_condition') != undefined && getlocalStorage('flt_condition') != """") {
                obj_val.FilterBy_FromValue = getlocalStorage('flt_condition');
            }
            else {
                obj_val.FilterBy_FromValue = ""."";
            }
            obj_val.FilterBy_ToValue = ""."";
            obj_val.from_index = 0;
            obj_val.to_index = 0;
            obj_val.record_count = ""10"";
            if (obj_val.row_count == undefined) {
                obj_val.row_count = ""0"";
            }
            var data = {};
            data.context = getContext();
            data.context.orgnId = $(""#cmb_FPOBelong"").data(""kendoComboBox"").value();
            data.context.userId = $(""#cmb_RIBelong"").data(""kendoComboBox"").value();
            data.context.locnId = getlocalStorage(""User_Id_Value"");
            data.context.Filter = obj_va");
            WriteLiteral(@"l;
            var Context = data.context;
            $.ajax({
                type: ""POST"",
                data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, Filter: Context.Filter }),
                url: ""/ListViewMaker/GetFarmersList"",
                dataType: ""json"",
                contentType: 'application/json; charset=utf-8',
                success: function (response) {

                    if (response.context != null) {
                        generate_farmer_registration_list(response);
                        $(""#loader"").fadeOut(1000);
                        //Overwritegrid();
                    }
                    else {
                        listgrid([]);
                    }
                },
                error: function (er) {
                    alert(er)
                    console.log(er)
                }

            });


        }
        catch (err) {
            javas");
            WriteLiteral(@"cript_log4j_root(arguments.callee.name, err.message);
        }
    }
    $(""#cmb_FPOBelong"").change(function () {
        $(""#loader"").fadeIn();        
        Overwritegrid();
    });
    $(""#cmb_RIBelong"").change(function () {
        $(""#cmb_FPOBelong"").data(""kendoComboBox"").value(""ALL"")
        fpoload();
        $(""#loader"").fadeIn();
        Overwritegrid();
    });
    function Overwritegrid() {
        var formval = form_Serialize(""frm_fdr_freg"");
        var obj_val = JSON.parse(formval);

        obj_val.FilterBy_Option = ""ALL"";
        obj_val.FilterBy_Code = ""."";
        if (getlocalStorage('flt_condition') != undefined && getlocalStorage('flt_condition') != """") {
            obj_val.FilterBy_FromValue = getlocalStorage('flt_condition');
        }
        else {
            obj_val.FilterBy_FromValue = ""."";
        }
        obj_val.FilterBy_ToValue = ""."";
        obj_val.from_index = 0;
        obj_val.to_index = 0;
        obj_val.record_count = ""10"";
        if (o");
            WriteLiteral(@"bj_val.row_count == undefined) {
            obj_val.row_count = ""0"";
        }

        var data = {};
        data.context = getContext();
        data.context.orgnId = $(""#cmb_FPOBelong"").data(""kendoComboBox"").value();
        data.context.userId = $(""#cmb_RIBelong"").data(""kendoComboBox"").value();
        data.context.locnId = getlocalStorage(""User_Id_Value"");
        data.context.Filter = obj_val;
        var Context = data.context;
        $.ajax({
            type: ""POST"",
            data: JSON.stringify({ userId: Context.userId, orgnId: Context.orgnId, locnId: Context.locnId, localeId: Context.localeId, Filter: Context.Filter }),
            url: ""/ListViewMaker/GetFarmersList"",
            dataType: ""json"",
            contentType: 'application/json; charset=utf-8',
            success: function (response) {

                if (response.context != null) {
                    generate_farmer_registration_list(response)
                    $(""#loader"").fadeOut(1000);
            ");
            WriteLiteral(@"        langcodeloc(""FARMREG"");
                }
                else {
                    listgrid([]);
                }
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }

        });
    }
    function generate_farmer_registration_list(res) {
        try {
            if (res.context.List == null) {
                var row_count = res.context.Filter.out_record_count;
                if (pager_click == true) {
                    $(""#gd_LVMarker"").empty();
                    $(""#gd_LVMarker"").append(""<div id='LVMarker'></div>"");
                    $(""#gd_LVMarker"").append(""<div id='pager'></div>"");
                    //SetPager(row_count);
                }
                else {
                }
                listgrid([]);
            }
            else {
                var data = changedataType(res.context.List);
                var row_count = res.context.Filter.out_record_count;
               ");
            WriteLiteral(@" if (pager_click == true) {
                    $(""#gd_LVMarker"").empty();
                    $(""#gd_LVMarker"").append(""<div id='LVMarker'></div>"");
                    $(""#gd_LVMarker"").append(""<div id='pager'></div>"");
                    //SetPager(row_count);
                }
                else {
                }
                listgrid(data);
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    var pager_ds = [];
    function SetPager(no_of_rec) {

        try {
            var arr = [];
            var obj = {};
            var pages = no_of_rec / 200;
            for (var i = 0; i < pages; i++) {
                obj[i] = ""page_"" + i;
                arr.push(obj);
            }
            pager_ds = new kendo.data.DataSource({
                data: arr,
                pageSize: 1
            });

            SetPagerDS(pager_ds, no_of_rec);
        }
        catch (err) {
            ");
            WriteLiteral(@"javascript_log4j_root(arguments.callee.name, err.message);
        }
    }

    function SetPagerDS(page_source, noofrecords) {

        try {
            $(""#pager"").kendoPager({
                dataSource: page_source,
                change: function (o) {
                    fetchPageDetail('pager');
                    return;
                },
                refresh: false,
                pageSize: 1,
                input: true,
                numeric: true,
                info: true,
                messages: {
                    of: ""of {0}"",
                    display: '<span style=""color:blue; font-weight : bold "">Total No of Records : </span>' + '<span style=""color:red"" >' + noofrecords + '</span>' //""<B>Total No of Records :</B> "" +   noofrecords + "" data items""
                }
            });
            page_source.read();
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err.message);
        }
        //pager.bind(""ch");
            WriteLiteral(@"ange"", fetchPageDetail('pager'));
    }

    var status_Priority = [];

    function listgrid(data) {
        try {
          $(""#LVMarker"").kendoGrid(
                {
                    excel: {
                        fileName: ""Farmer Registration.xlsx"",
                        filterable: true,
                        allPages: false
                    },
                    dataSource: {
                        data: data,
                        pageSize: 200,
                    },
                    toolbar: ""<button type= 'button' id = 'Exportclick' class = 'k-grid-excel' style = 'display:none' href=''><span class='fa fa-file-excel-o' style='color: Black;'> &nbsp Export To Excel</span></button>"",
                    excelExport: function (e) {
                        gridrecord;
                        var gd = $(""#LVMarker"").data(""kendoGrid"");
                        var len = gd.dataSource._data.length;
                        var chkall = $('#chkall').is(':checked');
 ");
            WriteLiteral(@"                       var chkfilter = $('#chkfilter').is(':checked');
                        var chktemp = $('#chktemp').is(':checked');
                        //var twokendobox = true;

                        var twokendobox = false;
                        gd.dataSource.pageSize(len);
                        exportfunction(e, chkall, chkfilter, chktemp, twokendobox, gd);
                        gd.dataSource.pageSize('10');
                        return false;
                    },
                    filterMenuInit: function (e) {
                        var gd = $(""#LVMarker"").data(""kendoGrid"");
                        filter_row(gd);
                    },
                    height: 460,
                    sortable: false,
                    selectable: true,
                    change: selectRow,
                    selectable: ""singl"",   //  Grid Row Selection
                    pageable: {
                        refresh: false,
                        //pageSizes: true,");
            WriteLiteral(@"
                        buttonCount: 5,
                        pageSizes: [""All"", 100, 200, 500, 2000]
                    },
                    filterable: true,
                    navigatable: true,
                    groupable: false,
                    resizable: true,
                    columns: [
                        {
                            field: ""out_farmer_rowid"",
                            title: ""Farmer Rowid"",
                            hidden: true,
                        },
                        {
                            field: ""out_farmer_code"",
                            title: ""Farmer Code"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
              ");
            WriteLiteral(@"              width: 200
                        },
                        {
                            field: ""out_version_no"",
                            title: ""version no"",
                            hidden: true,
                        },
                        {
                            field: ""out_photo_farmer"",
                            title: ""photo_farmer"",
                            hidden: true,
                        },
                        {
                            field: ""out_member_id"",
                            title: ""Member ID"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 200,
                        },
             ");
            WriteLiteral(@"           {
                            field: ""out_fpo_name"",
                            title: ""FPO Name"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 200,
                        },

                        {
                            field: ""out_farmer_name"",
                            title: ""Farmer First Name"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },");
            WriteLiteral(@"
                            width: 200,
                        },
                        {
                            field: ""out_sur_name"",
                            title: ""Sur Name"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 150,

                        },
                        {
                            field: ""out_fhw_name"",
                            title: ""Father/Husband/Wife's Name"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
              ");
            WriteLiteral(@"                      }
                                }
                            },
                            width: 180,

                        },

                        {
                            field: ""out_farmer_dob"",
                            title: ""DOB"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 110,
                        },
                        {
                            field: ""out_farmer_addr1"",
                            title: ""Permanent Address 1"",
                            filterable: {
                                extra: false,
                                operators: {
                                    s");
            WriteLiteral(@"tring: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 220,
                        },
                        {
                            field: ""Hamlet"",
                            title: ""Hamlet"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 180,
                            hidden: true,
                        },

                        {
                            field: ""out_farmer_ll_name"",
                            title: ""Farmer Tamil Name"",
                            hidden: true,
        ");
            WriteLiteral(@"                },
                        {
                            field: ""out_sur_ll_name"",
                            title: ""Sur Tamil Name"",
                            hidden: true,

                        },
                        {
                            field: ""out_fhw_ll_name"",
                            title: ""Father/Husband/Wife's tamil Name"",
                            hidden: true,

                        },

                        {
                            field: ""out_farmer_ll_addr1"",
                            title: ""Permanent Address 1"",
                            hidden: true,
                        },
                        {
                            field: ""out_farmer_ll_addr2"",
                            title: ""Permanent Address 2"",
                            hidden: true,
                        },

                        {
                            field: ""out_farmer_country"",
                            title: ""Country_c"",");
            WriteLiteral(@"
                            hidden: true,
                        },

                        {
                            field: ""out_farmer_country_desc"",
                            title: ""Country"",
                            hidden: true,
                        },

                        {
                            field: ""out_farmer_state"",
                            title: ""State"",
                            hidden: true,
                        },
                        {
                            field: ""out_farmer_state_desc"",
                            title: ""State"",
                            //filterable: {
                            //    cell: {
                            //        operator: ""contains"",
                            //        inputWidth: 1500
                            //    }
                            //},
                            width: 160
                        },
                        {
                            field: """);
            WriteLiteral(@"out_farmer_dist"",
                            title: ""District"",
                            hidden: true,
                        },
                        {
                            field: ""out_farmer_dist_desc"",
                            title: ""District"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 160
                        },
                        {
                            field: ""out_farmer_taluk"",
                            title: ""Taluk"",
                            hidden: true,
                        },
                        {
                            field: ""out_farmer_taluk_desc"",
                            title: ""Taluk"",
");
            WriteLiteral(@"                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 160
                        },
                        {
                            field: ""out_farmer_panchayat"",
                            title: ""Gram Panchayat"",
                            hidden: true,
                        },
                        {
                            field: ""out_farmer_panchayat_desc"",
                            title: ""Gram Panchayat"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
  ");
            WriteLiteral(@"                                  }
                                }
                            },
                            width: 160
                        },

                        {
                            field: ""out_farmer_village"",
                            title: ""Village"",
                            hidden: true,
                        },
                        {
                            field: ""out_farmer_village_desc"",
                            title: ""Village"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 130
                        },


                        {
                            field: ""out_farmer_pincode"",
  ");
            WriteLiteral(@"                          title: ""Pincode"",
                            attributes: { style: ""text-align:right;"" },
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 100
                        },
                        {
                            field: ""out_farmer_pincode_desc"",
                            title: ""Pincode Desc."",
                            hidden: true,
                        },
                        {
                            field: ""out_marital_status"",
                            title: ""Marital"",
                            hidden: true,
                        },
                        {
                            field: ""out_mar");
            WriteLiteral(@"ital_status_desc"",
                            title: ""Marital Desc."",
                            hidden: true,
                        },


                        {
                            field: ""out_gender_flag"",
                            title: ""Gender"",
                            hidden: true,
                        },
                        {
                            field: ""out_gender_flag_desc"",
                            title: ""Gender"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 100
                        },

                        {
                            field: ""out_reg_mobile_no"",
                            title: ""Far");
            WriteLiteral(@"mer Mobile Number"",
                            attributes: { style: ""text-align:right;"" },
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 140
                        },
                        {
                            field: ""out_reg_note"",
                            title: ""Reg.Note"",
                            hidden: true,
                        },
                        {
                            field: ""out_status_code"",
                            title: ""Status"",
                            hidden: true,
                        },
                        {
                            field: ""out_status_desc"",
                            titl");
            WriteLiteral(@"e: ""Status"",
                            filterable: {
                                extra: false,
                                operators: {
                                    string: {
                                        contains: ""Contains""
                                    }
                                }
                            },
                            width: 130,
                            //hidden: true,
                        },
                        {
                            field: ""out_row_timestamp"",
                            title: ""Time stamp"",
                            hidden: true,
                        },
                    ]

                });
            $("".k-dropdown-operator"").css('display', 'none');
            $(""#LVMarker .k-input"").attr('disabled', 'false');
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    function selectRow() {
        try {
      ");
            WriteLiteral(@"      var grid = $(""#LVMarker"").data(""kendoGrid"");
            var selectedItem = grid.dataItem(grid.select());
            setlocalStorage(""ls_pageList"", selectedItem);
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function Reslocal(Resourcelocal) {
        var result1 = JSON.stringify(Resourcelocal);
        var result = JSON.parse(result1);
        for (var i = 0; i < result.length; i++) {
            var screendata = result[i].data_field;
            var finalscreen = screendata.split(""-"");
            if (finalscreen[0] == 'gridlist') {
                $(""#LVMarker thead [data-field="" + result[i].control_code + ""]"").html(result[i].control_value);
            }
            if (finalscreen[0] == 'BUTTON') {

                $(""#"" + result[i].control_code + """").attr('data-original-title', result[i].control_value);

            }
        }
        $(""#LVMarker"").data(""kendoGrid"").refresh();
    }
</script>

<scrip");
            WriteLiteral(@"t>

    $(""#btn_Edit"").bind(""click"", function () {
        getSerializedSelectedRows('edit');
    });

    $(""#btn_View"").bind(""click"", function () {
        getSerializedSelectedRows('view');
    });

    $(""#btn_new"").bind(""click"", function () {
        btn_onClick('Create');
        location.href = ""../ListViewMaker/ListViewMakerForm"";
    });

    function getSerializedSelectedRows(mode) {
        try {
            if (getlocalStorage(""ls_pageList"") != undefined) {
                var items = getlocalStorage(""ls_pageList"");
                if (items.length == 0) {
                    kendoAlert(""Please select records"");
                }
                else {
                    if (mode == ""edit"") {
                        btn_onClick('Edit');
                        location.href = ""../ListViewMaker/ListViewMakerForm"";
                    }
                    else if (mode == ""view"") {
                        btn_onClick('View');
                        location.href = ""..");
            WriteLiteral(@"/ListViewMaker/ListViewMakerForm"";
                    }
                }
            }
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
</script>
<script>
       function listRefresh() {
        try {
            setlocalStorage('flt_condition', """");
            listpageloadfetch(0, 0);
            pager_click = true;
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }


    function list_pager_refresh() {
        try {
            listpageloadfetch(0, 0);
            pager_click = true;
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    var pager_click = true;
    function fetchPageDetail(pager_id) {
        try {
            var st_index = getStartIndex(pager_id);
            var end_index = getEndIndex(pager_id, st_index);
            pager_click = false;
            listpageloadfetc");
            WriteLiteral(@"h(st_index, end_index);
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    function get_hindi_lang() {       
        Overwritegrid();
    }

    function get_english_lang() {       
        Overwritegrid();
    }
</script>





");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
